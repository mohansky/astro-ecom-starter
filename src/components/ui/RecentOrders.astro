---
import Heading from "./Heading.astro";
import Paragraph from "./Paragraph.astro";
---

<div class="card bg-base-200 shadow-sm w-full">
  <div class="card-body">
    <Heading size="md" class="mb-4">Recent Orders</Heading>

    <div id="orders-loading" class="flex items-center justify-center h-32">
      <span class="loading loading-spinner loading-lg"></span>
    </div>

    <div id="orders-error" class="alert alert-error hidden">
      <span id="orders-error-message">Failed to load orders</span>
    </div>

    <div id="orders-container" class="hidden">
      <div class="overflow-x-auto">
        <table class="table table-sm">
          <thead>
            <tr>
              <th>Order ID</th>
              <th>Customer</th>
              <th>Items</th>
              <th>Total</th>
              <th>Status</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody id="orders-tbody">
          </tbody>
        </table>
      </div>
      <div class="mt-4 text-center">
        <a href="/admin/orders" class="btn btn-outline btn-sm">View All Orders</a>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function formatCurrencyOrders(amount) {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
    }).format(amount);
  }

  function formatDateOrders(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
  }

  function getStatusBadgeOrders(status) {
    const statusClasses = {
      'pending': 'badge-warning',
      'processing': 'badge-info',
      'shipped': 'badge-primary',
      'delivered': 'badge-success',
      'cancelled': 'badge-error'
    };

    const badgeClass = statusClasses[status.toLowerCase()] || 'badge-neutral';
    return `<span class="badge ${badgeClass} badge-sm">${status}</span>`;
  }

  async function loadRecentOrders() {
    try {
      const response = await fetch("/api/orders/recent?limit=10");
      if (!response.ok) throw new Error("Failed to fetch recent orders");

      const orders = await response.json();

      if (!Array.isArray(orders) || orders.length === 0) {
        showOrdersError("No recent orders found");
        return;
      }

      hideOrdersLoading();
      renderOrders(orders);
    } catch (error) {
      console.error("Error loading recent orders:", error);
      showOrdersError("Failed to load recent orders");
    }
  }

  function hideOrdersLoading() {
    document.getElementById("orders-loading").classList.add("hidden");
    document.getElementById("orders-container").classList.remove("hidden");
  }

  function showOrdersError(message) {
    document.getElementById("orders-loading").classList.add("hidden");
    document.getElementById("orders-error-message").textContent = message;
    document.getElementById("orders-error").classList.remove("hidden");
  }

  function renderOrders(orders) {
    const tbody = document.getElementById("orders-tbody");
    if (!tbody) return;

    tbody.innerHTML = orders.map(order => `
      <tr class="hover">
        <td class="font-mono text-sm">#${order.id}</td>
        <td class="max-w-32 truncate">${order.customerName}</td>
        <td class="text-center">${order.itemCount}</td>
        <td class="font-semibold">${formatCurrencyOrders(order.total)}</td>
        <td>${getStatusBadgeOrders(order.status)}</td>
        <td class="text-sm opacity-70">${formatDateOrders(order.createdAt)}</td>
      </tr>
    `).join('');
  }

  document.addEventListener("DOMContentLoaded", function () {
    loadRecentOrders();
  });
</script>

<style>
  .table th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
</style>