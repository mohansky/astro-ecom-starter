---
import Heading from "./Heading.astro";
import Paragraph from "./Paragraph.astro";
---

<div class="card bg-base-200 shadow-sm w-full">
  <div class="card-body">
    <Heading size="md" class="mb-4">Product Sales Distribution</Heading>

    <div class="flex flex-wrap gap-2 mb-4">
      <button id="productRange7" class="btn btn-outline btn-sm" data-days="7"
        >Last 7 Days</button
      >
      <button id="productRange30" class="btn btn-outline btn-sm" data-days="30"
        >Last 30 Days</button
      >
      <button id="productRange90" class="btn btn-outline btn-sm" data-days="90"
        >Last 90 Days</button
      >
      <button id="productRange365" class="btn btn-primary btn-sm" data-days="365"
        >Last Year</button
      >
    </div>

    <div id="product-chart-loading" class="flex items-center justify-center h-64">
      <span class="loading loading-spinner loading-lg"></span>
    </div>

    <div id="product-chart-error" class="alert alert-error hidden">
      <span id="product-error-message">Failed to load chart data</span>
    </div>

    <div id="product-chart-container" class="h-80 w-full hidden">
      <canvas id="productSalesChart"></canvas>
    </div>

    <div id="product-stats" class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
      <div class="stat bg-base-100 rounded-lg p-4">
        <Paragraph size="xxs" class="opacity-50">Top Product</Paragraph>
        <Heading size="sm" id="top-product" class="text-primary">-</Heading>
        <Paragraph size="xxs" class="opacity-50" id="top-product-revenue">₹0</Paragraph>
      </div>
      <div class="stat bg-base-100 rounded-lg p-4">
        <Paragraph size="xxs" class="opacity-50">Total Products</Paragraph>
        <Heading size="sm" id="total-products" class="text-info">0</Heading>
        <Paragraph size="xxs" class="opacity-50" id="products-period">Last year</Paragraph>
      </div>
      <div class="stat bg-base-100 rounded-lg p-4">
        <Paragraph size="xxs" class="opacity-50">Total Sales</Paragraph>
        <Heading size="sm" id="total-sales-revenue" class="text-accent">₹0</Heading>
        <Paragraph size="xxs" class="opacity-50" id="sales-period">Last year</Paragraph>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  let productChartInstance = null;
  let productSalesData = [];
  let currentProductDays = 365;

  function formatCurrency(amount) {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
    }).format(amount);
  }

  function getProductDateRangeDescription(days) {
    switch (days) {
      case 7:
        return "Last 7 days";
      case 30:
        return "Last 30 days";
      case 90:
        return "Last 90 days";
      case 365:
        return "Last year";
      default:
        return `Last ${days} days`;
    }
  }

  function waitForProductChart() {
    if (typeof Chart !== "undefined") {
      console.log("Chart.js loaded for product sales");
      initializeProductChart();
    } else {
      console.log("Waiting for Chart.js for product chart...");
      setTimeout(waitForProductChart, 100);
    }
  }

  function initializeProductChart() {
    console.log("Initializing product sales chart");
    loadProductSalesData();
    setupProductEventListeners();
  }

  async function loadProductSalesData(days = currentProductDays) {
    try {
      console.log("Loading product sales data for", days, "days...");

      const response = await fetch(`/api/orders/product-sales?days=${days}`);
      if (!response.ok) throw new Error("Failed to fetch product sales data");

      productSalesData = await response.json();
      console.log("Product sales data loaded:", productSalesData);

      if (!Array.isArray(productSalesData) || productSalesData.length === 0) {
        showProductError("No product sales data available");
        return;
      }

      hideProductLoading();
      createProductChart();
      updateProductStats();
    } catch (error) {
      console.error("Error loading product sales data:", error);
      showProductError("Failed to load product sales data");
    }
  }

  function hideProductLoading() {
    document.getElementById("product-chart-loading").classList.add("hidden");
    document.getElementById("product-chart-container").classList.remove("hidden");
    document.getElementById("product-stats").classList.remove("hidden");
  }

  function showProductError(message) {
    document.getElementById("product-chart-loading").classList.add("hidden");
    document.getElementById("product-error-message").textContent = message;
    document.getElementById("product-chart-error").classList.remove("hidden");
  }

  function createProductChart() {
    console.log("Creating product sales pie chart");

    if (typeof Chart === "undefined") {
      console.error("Chart.js not loaded");
      showProductError("Chart.js library not loaded");
      return;
    }

    const canvas = document.getElementById("productSalesChart");
    if (!canvas) {
      console.error("Product sales canvas not found");
      return;
    }

    const ctx = canvas.getContext("2d");

    if (productChartInstance) {
      productChartInstance.destroy();
    }

    // Generate colors for each product
    const colors = [
      '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
      '#FF9F40', '#FF6384', '#C9CBCF', '#4BC0C0', '#FF6384'
    ];

    productChartInstance = new Chart(ctx, {
      type: 'pie',
      data: {
        labels: productSalesData.map(item => item.productName),
        datasets: [{
          data: productSalesData.map(item => item.totalRevenue),
          backgroundColor: colors.slice(0, productSalesData.length),
          borderColor: colors.slice(0, productSalesData.length),
          borderWidth: 2
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              padding: 20,
              usePointStyle: true
            }
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                const item = productSalesData[context.dataIndex];
                const percentage = ((item.totalRevenue / productSalesData.reduce((sum, p) => sum + p.totalRevenue, 0)) * 100).toFixed(1);
                return [
                  `${item.productName}`,
                  `Revenue: ${formatCurrency(item.totalRevenue)} (${percentage}%)`,
                  `Total Sold: ${item.totalQuantity} units`,
                  `Orders: ${item.orderCount}`
                ];
              }
            }
          }
        }
      }
    });

    console.log("Product sales pie chart created successfully");
  }

  function updateProductStats() {
    if (productSalesData.length === 0) return;

    const totalRevenue = productSalesData.reduce((sum, item) => sum + item.totalRevenue, 0);
    const topProduct = productSalesData[0];
    const dateRangeDesc = getProductDateRangeDescription(currentProductDays);

    document.getElementById("top-product").textContent = topProduct.productName;
    document.getElementById("top-product-revenue").textContent = formatCurrency(topProduct.totalRevenue);
    document.getElementById("total-products").textContent = productSalesData.length;
    document.getElementById("total-sales-revenue").textContent = formatCurrency(totalRevenue);
    document.getElementById("products-period").textContent = dateRangeDesc;
    document.getElementById("sales-period").textContent = dateRangeDesc;
  }

  function setupProductEventListeners() {
    const dateRangeButtons = document.querySelectorAll("[data-days]");
    dateRangeButtons.forEach(button => {
      if (button.id.startsWith('productRange')) {
        button.addEventListener("click", async function () {
          const days = parseInt(this.getAttribute("data-days"));
          currentProductDays = days;

          // Update button states for product chart only
          const productButtons = document.querySelectorAll("[id^='productRange']");
          productButtons.forEach(btn => {
            btn.classList.remove("btn-primary");
            btn.classList.add("btn-outline");
          });
          this.classList.add("btn-primary");
          this.classList.remove("btn-outline");

          // Show loading and reload data
          document.getElementById("product-chart-loading").classList.remove("hidden");
          document.getElementById("product-chart-container").classList.add("hidden");
          document.getElementById("product-stats").classList.add("hidden");

          await loadProductSalesData(days);
        });
      }
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM loaded, waiting for Chart.js for product sales...");
    waitForProductChart();
  });
</script>

<style>
  #product-chart-container {
    min-height: 320px;
  }
  #productSalesChart {
    width: 100% !important;
    height: 320px !important;
  }
</style>