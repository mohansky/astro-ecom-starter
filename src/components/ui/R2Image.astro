---
import { Image } from "astro:assets";

interface Props {
  src: string;
  alt: string;
  title?: string;
  width?: number;
  height?: number;
  class?: string;
  fallback?: boolean;
}

const {
  src,
  alt,
  title = alt,
  width = 600,
  height = 600,
  class: className = "",
  fallback = true
} = Astro.props;

// Get the R2 bucket URL from environment variables
const R2_BUCKET_URL = import.meta.env.R2_BUCKET_URL;

// Clean the src path and construct the full R2 URL
const cleanSrc = typeof src === 'string' ? src.replace(/^\.\//, '') : src;
const imageUrl = typeof src === 'string' && src.startsWith('http') ? src : `${R2_BUCKET_URL}/${cleanSrc}`;
---

{fallback ? (
  <figure class={className}>
    <div class="relative">
      <Image
        src={imageUrl}
        alt={alt}
        title={title}
        width={width}
        height={height}
        class="bg-white border-2 border-primary object-contain rounded-lg w-full image-main"
        loading="lazy"
        format="webp"
      />
      <div class="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg border-2 border-primary image-fallback" style="display: none;">
        <svg
          class="w-24 h-24 text-base-content/50"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
          <circle cx="9" cy="9" r="2" />
          <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />
        </svg>
      </div>
    </div>
  </figure>
) : (
  <Image
    src={imageUrl}
    alt={alt}
    title={title}
    width={width}
    height={height}
    class={`bg-white border-2 border-primary object-contain rounded-lg w-full ${className}`}
    loading="lazy"
    format="webp"
  />
)}

<script>
  // Handle image loading errors for fallback mode
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.image-main');
    images.forEach((img) => {
      const imageElement = img as HTMLImageElement;
      imageElement.addEventListener('error', () => {
        const container = imageElement.closest('figure');
        if (container) {
          const fallback = container.querySelector('.image-fallback') as HTMLElement;
          if (fallback) {
            imageElement.style.display = 'none';
            fallback.style.display = 'flex';
          }
        }
      });
    });
  });
</script>