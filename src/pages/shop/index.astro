---
import Container from "@/components/ui/Container.astro";
import Heading from "@/components/ui/Heading.astro";
import Layout from "@/layouts/Layout.astro";
import ProductSEO from "@/components/SEO/ProductSEO.astro";
import { getAllProducts } from "@/lib/db";

const url = new URL(Astro.request.url);
const categoryParam = url.searchParams.get("category");

// Get categories for SEO and initial load
let categories: string[] = [];
let initialProducts: any[] = [];
try {
  const result = await getAllProducts({
    isActive: true,
    limit: 20,
    offset: 0,
    category: categoryParam || ""
  });
  categories = result.categories;
  initialProducts = result.products;
} catch (error) {
  console.error("Error loading products from database:", error);
}

// Create category variants
const categoryVariants = [
  { name: "All", value: "" },
  ...categories.map(cat => ({ name: cat, value: cat }))
];

// SEO meta data
const seoTitle = categoryParam
  ? `${categoryParam} Products - Astro Ecom`
  : "Shop All Products - Astro Ecom";
const seoDescription = categoryParam
  ? `Browse our ${categoryParam.toLowerCase()} collection. Quality products at great prices with fast shipping.`
  : `Discover our complete product collection. Quality items at competitive prices with fast shipping and excellent customer service.`;

const breadcrumbs = [
  { name: "Home", url: "/" },
  { name: "Shop", url: "/shop" },
  ...(categoryParam ? [{ name: categoryParam, url: `/shop?category=${categoryParam}` }] : [])
];
---

<ProductSEO
  title={seoTitle}
  description={seoDescription}
  products={initialProducts}
  breadcrumbs={breadcrumbs}
/>

<Layout>
  <Container width="marginxy">
    <div class="flex flex-wrap justify-between mb-8">
      <div>
        <Heading size="md" class="mb-5">Products</Heading>
        <div class="flex flex-wrap">
          {categoryVariants.map((item) => {
            const isActive =
              item.value === categoryParam ||
              (item.value === "" && (!categoryParam || categoryParam === ""));

            return (
              <button
                data-category={item.value}
                class={`category-btn mb-4 mr-3 px-4 py-2 text-sm font-semibold rounded-lg inline-block cursor-pointer
                  ${isActive
                    ? "bg-black text-white"
                    : "bg-muted hover:bg-black hover:text-white focus:bg-black focus:text-white"
                  }`}
              >
                {item.name}
              </button>
            );
          })}
        </div>
      </div>
    </div>

    <!-- Search and Filters -->
    <div class="flex flex-col sm:flex-row gap-4 mb-6">
      <div class="flex-1">
        <input
          type="text"
          id="searchInput"
          placeholder="Search products..."
          class="input input-bordered w-full"
        />
      </div>
      <div class="flex gap-2">
        <select id="limitSelect" class="select select-bordered">
          <option value="10">10 per page</option>
          <option value="20" selected>20 per page</option>
          <option value="50">50 per page</option>
        </select>
        <button id="clearBtn" class="btn btn-outline">Clear</button>
      </div>
    </div>

    <!-- Loading State -->
    <div id="products-loading" class="flex items-center justify-center h-32 hidden">
      <span class="loading loading-spinner loading-lg"></span>
    </div>

    <!-- Error State -->
    <div id="products-error" class="alert alert-error hidden">
      <span id="products-error-message">Failed to load products</span>
    </div>

    <!-- Empty State -->
    <div id="products-empty" class="text-center py-12 hidden">
      <svg
        class="w-16 h-16 mx-auto mb-4 opacity-50"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
        ></path>
      </svg>
      <h3 class="text-lg font-semibold mb-2">No products found</h3>
      <p class="text-muted">Try adjusting your search criteria or browse different categories</p>
    </div>

    <!-- Results Section -->
    <div id="products-container">
      <div class="flex justify-between items-center mb-4">
        <p id="results-count" class="text-xs text-muted">Loading...</p>
        <div class="flex gap-2">
          <button id="prevPage" class="btn btn-sm btn-outline" disabled>Previous</button>
          <button id="nextPage" class="btn btn-sm btn-outline" disabled>Next</button>
        </div>
      </div>

      <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        <!-- Products will be loaded here -->
      </div>
    </div>
  </Container>
</Layout>

<script is:inline>
  let currentSearch = '';
  let currentCategory = '';
  let currentLimit = 20;
  let isLoading = false;
  let pagination = { total: 0, limit: 20, offset: 0, hasMore: false };
  let allCategories = [];

  function formatCurrency(amount) {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
    }).format(amount);
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  async function loadProducts(search = '', category = '', limit = 20, offset = 0) {
    if (isLoading) return;
    isLoading = true;

    try {
      showLoading();

      const params = new URLSearchParams({
        limit: limit.toString(),
        offset: offset.toString(),
      });

      if (search.trim()) {
        params.set('search', search.trim());
      }

      if (category.trim()) {
        params.set('category', category.trim());
      }

      const response = await fetch(`/api/shop/products?${params}`);
      if (!response.ok) throw new Error('Failed to fetch products');

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Failed to load products');
      }

      if (!data.products || data.products.length === 0) {
        showEmpty();
        return;
      }

      pagination = data.pagination;
      allCategories = data.categories || [];
      currentSearch = search;
      currentCategory = category;
      currentLimit = limit;

      hideLoading();
      renderProducts(data.products);
      updatePagination();
      updateResultsCount();

      // Update URL without page reload
      const newUrl = new URL(window.location);
      if (category) {
        newUrl.searchParams.set('category', category);
      } else {
        newUrl.searchParams.delete('category');
      }

      if (search) {
        newUrl.searchParams.set('search', search);
      } else {
        newUrl.searchParams.delete('search');
      }

      window.history.replaceState({}, '', newUrl);

    } catch (error) {
      console.error('Error loading products:', error);
      showError('Failed to load products');
    } finally {
      isLoading = false;
    }
  }

  function showLoading() {
    document.getElementById('products-loading').classList.remove('hidden');
    document.getElementById('products-container').classList.add('hidden');
    document.getElementById('products-error').classList.add('hidden');
    document.getElementById('products-empty').classList.add('hidden');
  }

  function hideLoading() {
    document.getElementById('products-loading').classList.add('hidden');
    document.getElementById('products-container').classList.remove('hidden');
  }

  function showError(message) {
    document.getElementById('products-loading').classList.add('hidden');
    document.getElementById('products-container').classList.add('hidden');
    document.getElementById('products-empty').classList.add('hidden');
    document.getElementById('products-error-message').textContent = message;
    document.getElementById('products-error').classList.remove('hidden');
  }

  function showEmpty() {
    document.getElementById('products-loading').classList.add('hidden');
    document.getElementById('products-container').classList.add('hidden');
    document.getElementById('products-error').classList.add('hidden');
    document.getElementById('products-empty').classList.remove('hidden');
  }

  function renderProducts(products) {
    const grid = document.getElementById('products-grid');
    if (!grid) return;

    grid.innerHTML = products
      .map((product) => {
        const categoryClass = product.category === 'Macrame'
          ? 'badge-error'
          : product.category === 'Stitching'
          ? 'badge-accent'
          : '';

        const imageUrl = product.imagePath
          ? `https://pub-67b76734f5b543b9925c0870089929bb.r2.dev/products/${product.imagePath}/${product.imagePath}.jpg`
          : null;

        const finalPrice = product.price || product.total || product.mrp;
        const showDiscount = product.mrp && finalPrice < product.mrp;

        return `
          <div class="card bg-base-100 shadow-md hover:shadow-lg transition-shadow">
            <a href="/shop/${product.slug}" class="product-link block" title="View ${product.name} details">
              <figure class="relative">
                ${imageUrl ? `
                  <img
                    src="${imageUrl}"
                    alt="${product.name}"
                    class="object-cover w-full h-64"
                    loading="lazy"
                  />
                ` : `
                  <div class="flex items-center justify-center w-full h-64 bg-base-200">
                    <div class="text-center">
                      <div class="text-6xl mb-4">ðŸ“¦</div>
                      <p class="text-base-content/70">No image available</p>
                    </div>
                  </div>
                `}
                <div class="badge absolute bottom-2 right-2 z-10 ${categoryClass}">
                  ${product.category}
                </div>
                ${product.featured ? `
                  <div class="badge badge-warning absolute top-2 left-2 z-10">
                    Featured
                  </div>
                ` : ''}
              </figure>
              <div class="card-body p-4">
                <h3 class="card-title text-sm line-clamp-2 mb-2" title="${product.name}">
                  ${product.name}
                </h3>
                <div class="mb-2">
                  ${showDiscount ? `
                    <div class="flex items-center gap-2">
                      <span class="text-lg font-bold text-primary">${formatCurrency(finalPrice)}</span>
                      <span class="text-sm line-through text-base-content/60">${formatCurrency(product.mrp)}</span>
                    </div>
                  ` : `
                    <span class="text-lg font-bold">${formatCurrency(finalPrice)}</span>
                  `}
                </div>
                <p class="text-sm text-base-content/70 line-clamp-2 mb-4">
                  ${product.description || 'No description available'}
                </p>
                <div class="card-actions flex gap-2">
                  <button class="btn btn-outline btn-sm flex-1">
                    View Details
                  </button>
                  <button
                    class="btn btn-primary btn-sm flex-1 add-to-cart-btn"
                    data-product-id="${product.id}"
                    data-product-name="${product.name}"
                    data-product-price="${finalPrice}"
                    data-product-weight="${product.weight || 0}"
                    data-product-gst="${product.gstPercentage || 5}"
                    data-product-tax-inclusive="${product.taxInclusive || false}"
                    data-product-image="${product.imagePath ? `/products/${product.imagePath}/1.jpg` : ''}"
                  >
                    Add to Cart
                  </button>
                </div>
              </div>
            </a>
          </div>
        `;
      })
      .join('');

    // Re-initialize product card event listeners
    initProductCards();
  }

  function initProductCards() {
    // Fix links so Add to Cart button doesn't trigger navigation
    document.querySelectorAll('.product-link').forEach((card) => {
      card.addEventListener('click', (e) => {
        // If the click is on or inside the add-to-cart button, don't navigate
        if (
          e.target instanceof Element &&
          (e.target.closest('.add-to-cart-btn') || e.target.classList.contains('add-to-cart-btn'))
        ) {
          e.preventDefault();

          // Trigger add to cart functionality
          const button = e.target.closest('.add-to-cart-btn');
          if (button) {
            addToCart(button);
          }
        }
      });
    });
  }

  function addToCart(button) {
    // Basic add to cart functionality - you can expand this based on your cart system
    const productData = {
      id: button.dataset.productId,
      name: button.dataset.productName,
      price: parseFloat(button.dataset.productPrice),
      weight: parseFloat(button.dataset.productWeight),
      gstPercentage: parseFloat(button.dataset.productGst),
      taxInclusive: button.dataset.productTaxInclusive === 'true',
      image: button.dataset.productImage
    };

    // Show success message
    const originalText = button.textContent;
    button.textContent = 'Added!';
    button.disabled = true;

    setTimeout(() => {
      button.textContent = originalText;
      button.disabled = false;
    }, 1500);

    // You can dispatch a custom event here to integrate with your existing cart system
    window.dispatchEvent(new CustomEvent('addToCart', { detail: productData }));
  }

  function updatePagination() {
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    if (prevBtn) {
      prevBtn.disabled = pagination.offset === 0;
    }

    if (nextBtn) {
      nextBtn.disabled = !pagination.hasMore;
    }
  }

  function updateResultsCount() {
    const resultsCount = document.getElementById('results-count');
    if (!resultsCount) return;

    const start = pagination.offset + 1;
    const end = Math.min(pagination.offset + pagination.limit, pagination.total);

    if (pagination.total === 0) {
      resultsCount.textContent = 'No products found';
    } else {
      resultsCount.textContent = `Showing ${start}-${end} of ${pagination.total} products`;
    }
  }

  function updateCategoryButtons() {
    document.querySelectorAll('.category-btn').forEach(btn => {
      const category = btn.dataset.category || '';
      if (category === currentCategory) {
        btn.classList.remove('bg-muted');
        btn.classList.add('bg-black', 'text-white');
      } else {
        btn.classList.remove('bg-black', 'text-white');
        btn.classList.add('bg-muted');
      }
    });
  }

  // Debounced search function
  const debouncedSearch = debounce((search) => {
    loadProducts(search, currentCategory, currentLimit, 0);
  }, 300);

  function setupEventListeners() {
    const searchInput = document.getElementById('searchInput');
    const limitSelect = document.getElementById('limitSelect');
    const clearBtn = document.getElementById('clearBtn');
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    // Search input
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        debouncedSearch(e.target.value);
      });

      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          loadProducts(e.target.value, currentCategory, currentLimit, 0);
        }
      });
    }

    // Limit selector
    if (limitSelect) {
      limitSelect.addEventListener('change', (e) => {
        const newLimit = parseInt(e.target.value);
        loadProducts(currentSearch, currentCategory, newLimit, 0);
      });
    }

    // Clear button
    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        if (searchInput) {
          searchInput.value = '';
        }
        currentCategory = '';
        loadProducts('', '', currentLimit, 0);
        updateCategoryButtons();
      });
    }

    // Pagination buttons
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (pagination.offset > 0) {
          loadProducts(
            currentSearch,
            currentCategory,
            currentLimit,
            pagination.offset - pagination.limit
          );
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (pagination.hasMore) {
          loadProducts(
            currentSearch,
            currentCategory,
            currentLimit,
            pagination.offset + pagination.limit
          );
        }
      });
    }

    // Category buttons
    document.querySelectorAll('.category-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const category = btn.dataset.category || '';
        currentCategory = category;
        loadProducts(currentSearch, category, currentLimit, 0);
        updateCategoryButtons();
      });
    });
  }

  // Get initial category from URL
  function getInitialParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const category = urlParams.get('category') || '';
    const search = urlParams.get('search') || '';

    if (search) {
      const searchInput = document.getElementById('searchInput');
      if (searchInput) searchInput.value = search;
    }

    currentCategory = category;
    updateCategoryButtons();

    return { category, search };
  }

  document.addEventListener('DOMContentLoaded', function () {
    const { category, search } = getInitialParams();
    setupEventListeners();
    loadProducts(search, category, currentLimit, 0);
  });
</script>