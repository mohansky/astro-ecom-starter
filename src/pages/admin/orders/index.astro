---
// src/pages/admin/orders/index.astro
import Container from '@/components/ui/Container.astro';
import Heading from '@/components/ui/Heading.astro';
import Paragraph from '@/components/ui/Paragraph.astro';
import Layout from '@/layouts/Layout.astro';
import ProfileLayout from '@/layouts/ProfileLayout.astro';
import { getUser } from '@/lib/auth-utils';

const user = await getUser(Astro);

if (!user) {
  return Astro.redirect('/admin/login');
}

if (!user.emailVerified) {
  return Astro.redirect('/emailVerification');
}

// Status badge colors
const statusColors: Record<string, string> = {
  pending: 'badge-warning',
  processing: 'badge-info',
  shipped: 'badge-success',
  delivered: 'badge-accent',
  cancelled: 'badge-error',
};

// Function to get status color or fallback
function getStatusColor(status: string): string {
  return statusColors[status] || 'bg-gray-100 text-gray-800';
}
---

<Layout>
  <ProfileLayout title="Order Management">
    <Container width="marginy">
      <div class="card">
        <div class="card-body">
          <div class="flex flex-col gap-6">
            <!-- Order Statistics -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <!-- Total Orders and Revenue -->
              <div class="stats shadow">
                <div class="stat">
                  <Heading size="xxs" fontweight="light" class="opacity-50"
                    >Total Orders</Heading
                  >
                  <Heading size="xl" fontweight="bold" class="text-info"
                    ><span id="orders-count">Loading...</span></Heading
                  >
                  <div class="mt-3">
                    <Heading size="xxs" fontweight="light" class="opacity-50"
                      >Total Revenue</Heading
                    >
                    <Heading size="xl" fontweight="bold" class="text-accent">
                      <span id="orders-total" class="font-semibold">
                        Loading...
                      </span>
                    </Heading>
                  </div>
                </div>
              </div>

              <!-- Status Breakdown -->
              <div class="stats shadow">
                <div class="stat">
                  <Heading size="xxs" fontweight="light" class="opacity-50"
                    >Orders by Status</Heading
                  >
                  <div
                    class="stat-value text-sm grid lg:grid-cols-3 gap-6 mt-2"
                    id="status-breakdown"
                  >
                    <div class="text-sm opacity-70">Loading...</div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Search and Filters -->
            <div class="flex flex-col lg:flex-row gap-4 mb-6">
              <div class="flex-1">
                <div class="form-control">
                  <div class="input-group">
                    <label class="input">
                      <svg
                        class="h-[1em] opacity-50"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                      >
                        <g
                          stroke-linejoin="round"
                          stroke-linecap="round"
                          stroke-width="2.5"
                          fill="none"
                          stroke="currentColor"
                        >
                          <circle cx="11" cy="11" r="8"></circle>
                          <path d="m21 21-4.3-4.3"></path>
                        </g>
                      </svg>
                      <input
                        type="text"
                        id="orderSearch"
                        placeholder="Search orders by customer name, email, or order ID..."
                        class="input input-bordered w-full"
                      />
                    </label>
                  </div>
                </div>
              </div>
              <div class="flex gap-2">
                <select id="statusFilter" class="select select-bordered">
                  <option value="">All Statuses</option>
                </select>
                <button id="clearSearch" class="btn btn-outline">Clear</button>
                <button id="refreshBtn" class="btn btn-outline">
                  <svg
                    class="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    ></path>
                  </svg>
                  Refresh
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Loading State -->
      <div id="orders-loading" class="flex items-center justify-center h-32">
        <span class="loading loading-spinner loading-lg"></span>
      </div>

      <!-- Error State -->
      <div id="orders-error" class="alert alert-error hidden">
        <span id="orders-error-message">Failed to load orders</span>
      </div>

      <!-- Empty State -->
      <div id="orders-empty" class="text-center py-12 hidden">
        <svg
          class="w-16 h-16 mx-auto mb-4 opacity-50"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
        </svg>
        <Heading size="md" class="mb-2">No orders found</Heading>
        <Paragraph class="opacity-70"
          >Try adjusting your search criteria</Paragraph
        >
      </div>

      <!-- Results Section -->
      <div id="orders-container" class="hidden">
        <div class="flex justify-between items-center mb-4">
          <Paragraph size="sm" id="results-count" class="opacity-70"
            >Loading...</Paragraph
          >
          <div class="flex gap-2">
            <button id="prevPage" class="btn btn-sm btn-outline" disabled
              >Previous</button
            >
            <button id="nextPage" class="btn btn-sm btn-outline" disabled
              >Next</button
            >
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="table table-sm">
            <thead>
              <tr>
                <th>Order ID</th>
                <th>Date</th>
                <th>Status</th>
                <th>Customer</th>
                <th>Items</th>
                <th>Discount</th>
                <th>Total</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="orders-tbody">
              <!-- Orders will be loaded dynamically -->
            </tbody>
          </table>
        </div>
      </div>
    </Container>
  </ProfileLayout>

  <!-- Delete Confirmation Modal -->
  <dialog id="delete_modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Confirm Delete</h3>
      <p class="py-4">
        Are you sure you want to delete <span
          id="delete-order-info"
          class="font-semibold"></span>? This action cannot be undone.
      </p>
      <div class="modal-action">
        <form method="dialog">
          <button class="btn">Cancel</button>
        </form>
        <button id="confirm-delete-btn" class="btn btn-error"
          >Delete Order</button
        >
      </div>
    </div>
  </dialog>

  <!-- Toast Container -->
  <div class="toast toast-top toast-end z-50" id="toast-container"></div>
</Layout>

<script is:inline>
  let currentOrderPage = 0;
  let currentOrderSearch = '';
  let currentOrderStatus = '';
  let isOrdersLoading = false;
  let ordersPagination = { total: 0, limit: 20, offset: 0, hasMore: false };
  let orderStatuses = [];
  let allOrdersData = [];

  // Status badge colors
  const statusColors = {
    pending: 'badge-warning',
    processing: 'badge-info',
    shipped: 'badge-success',
    delivered: 'badge-accent',
    cancelled: 'badge-error',
  };

  function getStatusColor(status) {
    return statusColors[status] || 'badge-neutral';
  }

  function formatCurrencyOrders(amount) {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
    }).format(amount);
  }

  function formatDateTimeOrders(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  async function loadOrders(search = '', status = '', offset = 0) {
    if (isOrdersLoading) return;
    isOrdersLoading = true;

    try {
      showOrdersLoading();

      const params = new URLSearchParams({
        limit: '20',
        offset: offset.toString(),
      });

      if (search.trim()) {
        params.set('search', search.trim());
      }

      if (status.trim()) {
        params.set('status', status.trim());
      }

      const response = await fetch(`/api/orders?${params}`);
      if (!response.ok) throw new Error('Failed to fetch orders');

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Failed to load orders');
      }

      if (!data.orders || data.orders.length === 0) {
        showOrdersEmpty();
        updateOrderStats([], data.statuses || []);
        return;
      }

      ordersPagination = data.pagination;
      orderStatuses = data.statuses || [];
      allOrdersData = data.orders;
      currentOrderSearch = search;
      currentOrderStatus = status;
      currentOrderPage = Math.floor(offset / ordersPagination.limit);

      hideOrdersLoading();
      renderOrders(data.orders);
      updateOrdersPagination();
      updateStatusFilter();
      updateOrderStats(data.orders, data.statuses);
    } catch (error) {
      console.error('Error loading orders:', error);
      showOrdersError('Failed to load orders');
    } finally {
      isOrdersLoading = false;
    }
  }

  function showOrdersLoading() {
    document.getElementById('orders-loading').classList.remove('hidden');
    document.getElementById('orders-container').classList.add('hidden');
    document.getElementById('orders-error').classList.add('hidden');
    document.getElementById('orders-empty').classList.add('hidden');
  }

  function hideOrdersLoading() {
    document.getElementById('orders-loading').classList.add('hidden');
    document.getElementById('orders-container').classList.remove('hidden');
  }

  function showOrdersError(message) {
    document.getElementById('orders-loading').classList.add('hidden');
    document.getElementById('orders-container').classList.add('hidden');
    document.getElementById('orders-empty').classList.add('hidden');
    document.getElementById('orders-error-message').textContent = message;
    document.getElementById('orders-error').classList.remove('hidden');
  }

  function showOrdersEmpty() {
    document.getElementById('orders-loading').classList.add('hidden');
    document.getElementById('orders-container').classList.add('hidden');
    document.getElementById('orders-error').classList.add('hidden');
    document.getElementById('orders-empty').classList.remove('hidden');
  }

  function renderOrders(orders) {
    const tbody = document.getElementById('orders-tbody');
    if (!tbody) return;

    tbody.innerHTML = orders
      .map(
        (order) => `
      <tr class="hover">
        <td>
          <div class="font-semibold">Order #${order.id}</div>
        </td>
        <td class="text-sm">${formatDateTimeOrders(order.createdAt)}</td>
        <td>
          <span class="badge ${getStatusColor(order.status)} capitalize">
            ${order.status}
          </span>
        </td>
        <td>
          <div class="font-semibold max-w-48 truncate">${order.customerName}</div>
        </td>
        <td class="text-center">
          <span class="badge badge-outline">${order.itemCount}</span>
        </td>
        <td>
          ${
            order.couponCode
              ? `
            <div class="text-success">
              <div class="text-sm font-medium">${order.couponCode}</div>
              <div class="text-xs">-${formatCurrencyOrders(order.couponDiscount || 0)}</div>
            </div>
          `
              : `<span class="text-base-content/50">—</span>`
          }
        </td>
        <td class="font-semibold">${formatCurrencyOrders(order.total)}</td>
        <td>
          <div class="flex gap-1">
            <a href="/admin/orders/${order.id}" class="btn btn-accent btn-xs">
              View
            </a>
            <button
              class="btn btn-error btn-xs delete-order-btn"
              data-order-id="${order.id}"
              data-customer-name="${order.customerName}"
            >
              Delete
            </button>
          </div>
        </td>
      </tr>
    `
      )
      .join('');

    // Update results count
    const resultsCount = document.getElementById('results-count');
    if (resultsCount) {
      const start = ordersPagination.offset + 1;
      const end = Math.min(
        ordersPagination.offset + ordersPagination.limit,
        ordersPagination.total
      );
      resultsCount.textContent = `Showing ${start}-${end} of ${ordersPagination.total} orders`;
    }

    // Re-attach delete event listeners
    document.querySelectorAll('.delete-order-btn').forEach((button) => {
      button.addEventListener('click', function () {
        const orderId = this.getAttribute('data-order-id');
        const customerName = this.getAttribute('data-customer-name');
        deleteOrder(orderId, customerName);
      });
    });
  }

  function updateOrdersPagination() {
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    if (prevBtn) {
      prevBtn.disabled = ordersPagination.offset === 0;
    }

    if (nextBtn) {
      nextBtn.disabled = !ordersPagination.hasMore;
    }
  }

  function updateStatusFilter() {
    const statusSelect = document.getElementById('statusFilter');
    if (!statusSelect || !orderStatuses) return;

    const currentValue = statusSelect.value;

    statusSelect.innerHTML =
      '<option value="">All Statuses</option>' +
      orderStatuses
        .map(
          (status) =>
            `<option value="${status}" ${status === currentValue ? 'selected' : ''} class="capitalize">${status}</option>`
        )
        .join('');
  }

  function updateOrderStats(orders, statuses) {
    // Update total orders count
    const ordersCount = document.getElementById('orders-count');
    if (ordersCount) {
      ordersCount.textContent = ordersPagination.total.toString();
    }

    // Calculate total revenue from all orders (not just current page)
    const ordersTotal = document.getElementById('orders-total');
    if (ordersTotal && orders.length > 0) {
      // For pagination, we need to calculate based on all orders, not just current page
      // This is an approximation - for exact total you'd need a separate API call
      const currentPageTotal = orders.reduce(
        (sum, order) => sum + order.total,
        0
      );
      const avgOrderValue = currentPageTotal / orders.length;
      const estimatedTotal = avgOrderValue * ordersPagination.total;

      ordersTotal.textContent = formatCurrencyOrders(estimatedTotal);
    }

    // Update status breakdown
    const statusBreakdown = document.getElementById('status-breakdown');
    if (statusBreakdown && statuses && statuses.length > 0) {
      // Calculate status counts for all filtered results
      const statusCounts = {};
      statuses.forEach((status) => {
        statusCounts[status] = 0;
      });

      // This is simplified - in a real app you'd get actual counts from the API
      orders.forEach((order) => {
        if (statusCounts.hasOwnProperty(order.status)) {
          statusCounts[order.status]++;
        }
      });

      statusBreakdown.innerHTML = Object.entries(statusCounts)
        .map(
          ([status, count]) => `
          <div class="flex bg-base-200 p-2 rounded-sm items-center justify-between">
            <div class="capitalize badge badge-lg font-normal ${getStatusColor(status)}">
              ${status}
            </div>
            <span class="text-base-content/70">
              ${count}
            </span>
          </div>
        `
        )
        .join('');
    }
  }

  // Debounced search function
  const debouncedOrderSearch = debounce((search) => {
    loadOrders(search, currentOrderStatus, 0);
  }, 300);

  function setupOrdersEventListeners() {
    const searchInput = document.getElementById('orderSearch');
    const statusFilter = document.getElementById('statusFilter');
    const clearBtn = document.getElementById('clearSearch');
    const refreshBtn = document.getElementById('refreshBtn');
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        debouncedOrderSearch(e.target.value);
      });

      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          loadOrders(e.target.value, currentOrderStatus, 0);
        }
      });
    }

    if (statusFilter) {
      statusFilter.addEventListener('change', (e) => {
        loadOrders(currentOrderSearch, e.target.value, 0);
      });
    }

    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        if (searchInput) {
          searchInput.value = '';
        }
        if (statusFilter) {
          statusFilter.value = '';
        }
        loadOrders('', '', 0);
      });
    }

    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        const search = searchInput?.value || '';
        const status = statusFilter?.value || '';
        loadOrders(search, status, ordersPagination.offset);
      });
    }

    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (ordersPagination.offset > 0) {
          loadOrders(
            currentOrderSearch,
            currentOrderStatus,
            ordersPagination.offset - ordersPagination.limit
          );
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (ordersPagination.hasMore) {
          loadOrders(
            currentOrderSearch,
            currentOrderStatus,
            ordersPagination.offset + ordersPagination.limit
          );
        }
      });
    }
  }

  // Delete order function
  function deleteOrder(orderId, customerName) {
    const modal = document.getElementById('delete_modal');
    const deleteOrderInfo = document.getElementById('delete-order-info');

    if (deleteOrderInfo) {
      deleteOrderInfo.textContent = `Order #${orderId} for ${customerName}`;
    }

    // Store order ID for deletion
    window.currentOrderToDelete = orderId;
    modal?.showModal();
  }

  // Handle delete confirmation
  document.addEventListener('DOMContentLoaded', function () {
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');

    if (confirmDeleteBtn) {
      confirmDeleteBtn.addEventListener('click', async function () {
        const orderId = window.currentOrderToDelete;
        if (!orderId) return;

        this.disabled = true;
        this.textContent = 'Deleting...';

        try {
          const response = await fetch(`/api/orders/${orderId}/delete`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          const result = await response.json();

          if (result.success) {
            // Close modal
            document.getElementById('delete_modal')?.close();

            // Reload orders
            loadOrders(
              currentOrderSearch,
              currentOrderStatus,
              ordersPagination.offset
            );
          } else {
            throw new Error(result.error || 'Failed to delete order');
          }
        } catch (error) {
          console.error('Delete error:', error);
          alert('Failed to delete order. Please try again.');
        } finally {
          this.disabled = false;
          this.textContent = 'Delete Order';
        }
      });
    }
  });

  document.addEventListener('DOMContentLoaded', function () {
    setupOrdersEventListeners();
    loadOrders();
  });
</script>
