---
// src/pages/admin/orders/[id].astro
import Container from '@/components/ui/Container.astro';
import Layout from '@/layouts/Layout.astro';
import ProfileLayout from '@/layouts/ProfileLayout.astro';
import { StatusUpdateModal } from '@/components/Admin/StatusUpdateModal';
import { formatCurrency, formatDate } from '@/lib/helpers';
import { getOrderById, getOrderStatusHistory } from '@/lib/orders';
import { getUser } from '@/lib/auth-utils';

const { id } = Astro.params;
const orderId = parseInt(id || '0');

// Get current user for audit trail
const currentUser = await getUser(Astro);
if (!currentUser) {
  return Astro.redirect('/admin/login');
}

// No longer need POST handling since we're using the modal with API calls

const order = await getOrderById(orderId);
const statusHistory = await getOrderStatusHistory(orderId);

if (!order) {
  return Astro.redirect('/admin/orders');
}

const statuses = ['pending', 'processing', 'shipped', 'delivered', 'cancelled'];

const statusBadges: Record<string, string> = {
  pending: 'badge-warning',
  processing: 'badge-info',
  shipped: 'badge-accent',
  delivered: 'badge-success',
  cancelled: 'badge-error',
};

function getStatusBadge(status: string): string {
  return statusBadges[status] || 'badge-neutral';
}
---

<Layout title="Manobal | Order Details">
  <ProfileLayout title={`Details for Order #${order.id}`}>
    <Container width="marginy">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <div class="lg:col-span-2 card bg-base-100 shadow-sm">
          <div class="card-body">
            <div
              class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4"
            >
              <div>
                <h2 class="card-title text-2xl">Order #{order.id}</h2>
                <p class="text-base-content/70">
                  Placed on {formatDate(order.createdAt)}
                </p>
              </div>
              <div
                class="flex flex-col sm:flex-row items-start sm:items-center gap-4"
              >
                <div class="flex flex-col">
                  <div
                    class={`capitalize badge badge-md ${getStatusBadge(order.status)}`}
                  >
                    {order.status}
                  </div>
                  <label class="label text-xs text-center">Current Status</label
                  >
                </div>

                <StatusUpdateModal
                  client:load
                  orderId={order.id}
                  currentStatus={order.status}
                />
              </div>
            </div>

            <div class="divider"></div>

            <!-- Status History -->
            <div class="mt-4">
              <h3 class="font-semibold text-lg mb-3">Status History</h3>
              {
                statusHistory.length > 0 ? (
                  <div class="overflow-x-auto">
                    <table class="table table-sm">
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>From</th>
                          <th>To</th>
                          <th>Changed By</th>
                          <th>Notes</th>
                        </tr>
                      </thead>
                      <tbody>
                        {statusHistory.map((entry) => (
                          <tr>
                            <td class="text-sm">
                              {formatDate(entry.createdAt)}
                            </td>
                            <td>
                              {entry.previousStatus ? (
                                <span
                                  class={`badge badge-xs ${getStatusBadge(entry.previousStatus)}`}
                                >
                                  {entry.previousStatus}
                                </span>
                              ) : (
                                <span class="text-base-content/50">-</span>
                              )}
                            </td>
                            <td>
                              <span
                                class={`badge badge-xs ${getStatusBadge(entry.newStatus)}`}
                              >
                                {entry.newStatus}
                              </span>
                            </td>
                            <td class="text-sm">
                              <div class="flex flex-col">
                                <span class="font-medium">
                                  @
                                  {entry.changedByUsername ||
                                    entry.changedByName}
                                </span>
                              </div>
                            </td>
                            <td class="text-sm max-w-xs">
                              {entry.notes ? (
                                <span class="text-base-content/80">
                                  {entry.notes}
                                </span>
                              ) : (
                                <span class="text-base-content/40 italic">
                                  No notes
                                </span>
                              )}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <div class="text-center py-8 text-base-content/60">
                    <p>No status changes recorded yet.</p>
                  </div>
                )
              }
            </div>
          </div>
        </div>

        <!-- Customer Information -->
        <div class="card bg-base-100 shadow-sm mt-6">
          <div class="card-body">
            <h3 class="card-title mb-4">Customer Information</h3>
            <ul class="list bg-base-100 rounded-box">
              <li class="list-row">
                <span class="font-medium opacity-70">Customer:</span>
                <span class="font-medium">{order.customerName}</span>
              </li>
              <li class="list-row">
                <span class="font-medium opacity-70">Email:</span>
                <a
                  href={`mailto:${order.email}`}
                  class="link link-hover link-neutral"
                >
                  {order.email}
                </a>
              </li>
              <li class="list-row">
                <span class="font-medium opacity-70">Address:</span>
                <span>
                  {order.address}, {order.city}, {order.state}
                  {order.zipCode}
                </span>
              </li>
              <li class="list-row">
                <span class="font-medium opacity-70">Total:</span>
                <span class="font-bold text-lg">
                  {formatCurrency(order.total)}
                </span>
              </li>
            </ul>
          </div>
        </div>
      </div>

      <!-- Order Items -->
      <div class="card bg-base-100 shadow-sm mt-6">
        <div class="card-body">
          <h3 class="card-title mb-4">Order Items</h3>

          <div class="overflow-x-auto">
            <table class="table">
              <thead class="bg-base-200/30">
                <tr>
                  <th
                    scope="col"
                    class="text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >Product</th
                  >
                  <th
                    scope="col"
                    class="text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >Price</th
                  >
                  <th
                    scope="col"
                    class="text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >Quantity</th
                  >

                  <th
                    scope="col"
                    class="text-xs text-right font-medium text-gray-500 uppercase tracking-wider"
                    >Total</th
                  >
                </tr>
              </thead>
              <tbody>
                {
                  order.items.map((item) => (
                    <tr class="hover:bg-base-200/30">
                      <td>
                        <div>
                          <div class="font-medium text-lg">
                            {item.productName}
                          </div>
                          <div class="text-xs text-base-content/70">
                            SKU: {item.sku || 'N/A'}
                          </div>
                        </div>
                      </td>
                      <td>{formatCurrency(item.price)}</td>
                      <td>{item.quantity}</td>
                      <td class="text-right font-medium">
                        {formatCurrency(item.total)}
                      </td>
                    </tr>
                  ))
                }
              </tbody>
            </table>
          </div>

          <div class="divider"></div>

          <!-- Order Summary -->
          <div class="flex flex-col gap-2 max-w-md ml-auto">
            <div class="flex justify-between">
              <span class="text-base-content/70">Subtotal:</span>
              <span>{formatCurrency(order.subtotal)}</span>
            </div>
            {
              order.couponCode && (
                <div class="flex justify-between text-success">
                  <span class="text-base-content/70">
                    Discount ({order.couponCode}):
                  </span>
                  <span>-{formatCurrency(order.couponDiscount)}</span>
                </div>
              )
            }
            <div class="flex justify-between">
              <span class="text-base-content/70">Shipping (weight-based):</span>
              <span>{formatCurrency(order.shipping)}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-base-content/70">Tax:</span>
              <span>{formatCurrency(order.tax)}</span>
            </div>
            <div class="divider my-2"></div>
            <div class="flex justify-between text-lg font-bold">
              <span>Total:</span>
              <span>{formatCurrency(order.total)}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="flex flex-col sm:flex-row justify-between gap-4 mt-6">
        <a href="/admin/orders" class="btn btn-soft btn-sm">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-2"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Back to Orders
        </a>

        <button
          type="button"
          onclick="window.print()"
          class="btn btn-neutral btn-sm"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-2"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"
            ></path>
          </svg>
          Print Order
        </button>
      </div>
    </Container>
  </ProfileLayout>
</Layout>
