---
// src/pages/admin/customers/index.astro
import Layout from '@/layouts/Layout.astro';
import ProfileLayout from '@/layouts/ProfileLayout.astro';
import Container from '@/components/ui/Container.astro';
import Heading from '@/components/ui/Heading.astro';
import Paragraph from '@/components/ui/Paragraph.astro';
import { getUser } from '@/lib/auth-utils';

const user = await getUser(Astro);

if (!user) {
  return Astro.redirect('/admin/login');
}

if (!user.emailVerified) {
  return Astro.redirect('/emailVerification');
}
---

<Layout title="Customers">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-8xl mt-20 lg:mt-0 mx-auto">
        <div class="mb-8">
          <Heading size="xl" class="mb-2">Customers</Heading>
          <Paragraph class="opacity-70"
            >Manage and view customer information</Paragraph
          >
        </div>

        <div class="card bg-base-200 shadow-sm w-full">
          <div class="card-body">
            <!-- Search Section -->
            <div class="flex flex-col md:flex-row gap-4 mb-6">
              <div class="flex-1">
                <div class="form-control">
                  <div class="input-group">
                    <label class="input">
                      <svg
                        class="h-[1em] opacity-50"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                      >
                        <g
                          stroke-linejoin="round"
                          stroke-linecap="round"
                          stroke-width="2.5"
                          fill="none"
                          stroke="currentColor"
                        >
                          <circle cx="11" cy="11" r="8"></circle>
                          <path d="m21 21-4.3-4.3"></path>
                        </g>
                      </svg>
                      <input
                        type="text"
                        id="customerSearch"
                        placeholder="Search customers by name or email..."
                        class="input input-bordered w-full"
                      />
                    </label>
                  </div>
                </div>
              </div>
              <div class="flex gap-2">
                <button id="clearSearch" class="btn btn-outline btn-sm"
                  >Clear</button
                >
                <button id="refreshBtn" class="btn btn-outline btn-sm">
                  <svg
                    class="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    ></path>
                  </svg>
                  Refresh
                </button>
              </div>
            </div>

            <!-- Loading State -->
            <div
              id="customers-loading"
              class="flex items-center justify-center h-32"
            >
              <span class="loading loading-spinner loading-lg"></span>
            </div>

            <!-- Error State -->
            <div id="customers-error" class="alert alert-error hidden">
              <span id="customers-error-message">Failed to load customers</span>
            </div>

            <!-- Empty State -->
            <div id="customers-empty" class="text-center py-12 hidden">
              <svg
                class="w-16 h-16 mx-auto mb-4 opacity-50"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"
                ></path>
              </svg>
              <Heading size="md" class="mb-2">No customers found</Heading>
              <Paragraph class="opacity-70"
                >Try adjusting your search criteria</Paragraph
              >
            </div>

            <!-- Results Section -->
            <div id="customers-container" class="hidden">
              <div class="flex justify-between items-center mb-4">
                <Paragraph size="sm" id="results-count" class="opacity-70"
                  >Loading...</Paragraph
                >
                <div class="flex gap-2">
                  <button id="prevPage" class="btn btn-sm btn-outline" disabled
                    >Previous</button
                  >
                  <button id="nextPage" class="btn btn-sm btn-outline" disabled
                    >Next</button
                  >
                </div>
              </div>

              <div class="overflow-x-auto">
                <table class="table table-sm">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Email</th>
                      <th>Phone</th>
                      <th>Location</th>
                      <th>Orders</th>
                      <th>Total Spent</th>
                      <th>Joined</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="customers-tbody"> </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<script is:inline>
  let currentPage = 0;
  let currentSearch = '';
  let isLoading = false;
  let pagination = { total: 0, limit: 20, offset: 0, hasMore: false };

  function formatCurrencyCustomers(amount) {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
    }).format(amount);
  }

  function formatDateCustomers(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
    });
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  async function loadCustomers(search = '', offset = 0) {
    if (isLoading) return;
    isLoading = true;

    try {
      showLoading();

      const params = new URLSearchParams({
        limit: '20',
        offset: offset.toString(),
      });

      if (search.trim()) {
        params.set('search', search.trim());
      }

      const response = await fetch(`/api/customers?${params}`);
      if (!response.ok) throw new Error('Failed to fetch customers');

      const data = await response.json();

      if (!data.customers || data.customers.length === 0) {
        showEmpty();
        return;
      }

      pagination = data.pagination;
      currentSearch = search;
      currentPage = Math.floor(offset / pagination.limit);

      hideLoading();
      renderCustomers(data.customers);
      updatePagination();
    } catch (error) {
      showError('Failed to load customers');
    } finally {
      isLoading = false;
    }
  }

  function showLoading() {
    document.getElementById('customers-loading').classList.remove('hidden');
    document.getElementById('customers-container').classList.add('hidden');
    document.getElementById('customers-error').classList.add('hidden');
    document.getElementById('customers-empty').classList.add('hidden');
  }

  function hideLoading() {
    document.getElementById('customers-loading').classList.add('hidden');
    document.getElementById('customers-container').classList.remove('hidden');
  }

  function showError(message) {
    document.getElementById('customers-loading').classList.add('hidden');
    document.getElementById('customers-container').classList.add('hidden');
    document.getElementById('customers-empty').classList.add('hidden');
    document.getElementById('customers-error-message').textContent = message;
    document.getElementById('customers-error').classList.remove('hidden');
  }

  function showEmpty() {
    document.getElementById('customers-loading').classList.add('hidden');
    document.getElementById('customers-container').classList.add('hidden');
    document.getElementById('customers-error').classList.add('hidden');
    document.getElementById('customers-empty').classList.remove('hidden');
  }

  function renderCustomers(customers) {
    const tbody = document.getElementById('customers-tbody');
    if (!tbody) return;

    tbody.innerHTML = customers
      .map(
        (customer) => `
      <tr class="hover">
        <td>
          <div class="font-semibold">${customer.firstName} ${customer.lastName}</div>
        </td>
        <td class="max-w-48 truncate">${customer.email}</td>
        <td>${customer.phoneNumber || '-'}</td>
        <td class="max-w-32 truncate">${customer.city}, ${customer.state}</td>
        <td class="text-center">
          <span class="badge badge-outline">${customer.orderCount}</span>
        </td>
        <td class="font-semibold">${formatCurrencyCustomers(customer.totalSpent)}</td>
        <td class="text-sm opacity-70">${formatDateCustomers(customer.createdAt)}</td>
        <td>
          <a href="/admin/customers/${customer.id}" class="btn btn-ghost btn-xs">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
            View
          </a>
        </td>
      </tr>
    `
      )
      .join('');

    // Update results count
    const resultsCount = document.getElementById('results-count');
    if (resultsCount) {
      const start = pagination.offset + 1;
      const end = Math.min(
        pagination.offset + pagination.limit,
        pagination.total
      );
      resultsCount.textContent = `Showing ${start}-${end} of ${pagination.total} customers`;
    }
  }

  function updatePagination() {
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    if (prevBtn) {
      prevBtn.disabled = pagination.offset === 0;
    }

    if (nextBtn) {
      nextBtn.disabled = !pagination.hasMore;
    }
  }

  // Debounced search function
  const debouncedSearch = debounce((search) => {
    loadCustomers(search, 0);
  }, 300);

  function setupEventListeners() {
    const searchInput = document.getElementById('customerSearch');
    const searchBtn = document.getElementById('searchBtn');
    const clearBtn = document.getElementById('clearSearch');
    const refreshBtn = document.getElementById('refreshBtn');
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        debouncedSearch(e.target.value);
      });

      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          loadCustomers(e.target.value, 0);
        }
      });
    }

    if (searchBtn) {
      searchBtn.addEventListener('click', () => {
        const search = searchInput?.value || '';
        loadCustomers(search, 0);
      });
    }

    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        if (searchInput) {
          searchInput.value = '';
        }
        loadCustomers('', 0);
      });
    }

    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        const search = searchInput?.value || '';
        loadCustomers(search, pagination.offset);
      });
    }

    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (pagination.offset > 0) {
          loadCustomers(currentSearch, pagination.offset - pagination.limit);
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (pagination.hasMore) {
          loadCustomers(currentSearch, pagination.offset + pagination.limit);
        }
      });
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    setupEventListeners();
    loadCustomers();
  });
</script>

<style>
  .table th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .input-group input:focus {
    outline: none;
    border-color: oklch(var(--p));
  }
</style>
