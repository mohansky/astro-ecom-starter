---
import Layout from "@/layouts/Layout.astro";
import ProfileLayout from "@/layouts/ProfileLayout.astro";
import Container from "@/components/ui/Container.astro";
import Heading from "@/components/ui/Heading.astro";
import Paragraph from "@/components/ui/Paragraph.astro";
import { getUser } from "@/lib/auth-utils";

const user = await getUser(Astro);

if (!user) {
  return Astro.redirect("/admin/login");
}

if (!user.emailVerified) {
  return Astro.redirect("/emailVerification");
}

const { id } = Astro.params;
---

<Layout title="Customer Details">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-8xl mt-20 lg:mt-0 mx-auto">
        <!-- Breadcrumbs -->
        <div class="breadcrumbs text-sm mb-6">
          <ul>
            <li><a href="/admin">Dashboard</a></li>
            <li><a href="/admin/customers">Customers</a></li>
            <li>Customer Details</li>
          </ul>
        </div>

        <!-- Loading State -->
        <div id="customer-loading" class="flex items-center justify-center h-64">
          <span class="loading loading-spinner loading-lg"></span>
        </div>

        <!-- Error State -->
        <div id="customer-error" class="alert alert-error hidden mb-8">
          <span id="customer-error-message">Failed to load customer details</span>
        </div>

        <!-- Customer Details -->
        <div id="customer-details" class="hidden">
          <!-- Header -->
          <div class="flex flex-col md:flex-row md:items-center justify-between mb-8">
            <div>
              <Heading size="xl" id="customer-name" class="mb-2">Loading...</Heading>
              <Paragraph id="customer-email" class="opacity-70">Loading...</Paragraph>
            </div>
            <div class="mt-4 md:mt-0">
              <a href="/admin/customers" class="btn btn-outline">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Customers
              </a>
            </div>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Customer Information -->
            <div class="lg:col-span-1">
              <div class="card bg-base-200 shadow-sm">
                <div class="card-body">
                  <Heading size="md" class="mb-4">Customer Information</Heading>

                  <div class="space-y-4">
                    <div>
                      <Paragraph size="xs" class="opacity-50 uppercase tracking-wide mb-1">Full Name</Paragraph>
                      <Paragraph id="customer-full-name" class="font-semibold">Loading...</Paragraph>
                    </div>

                    <div>
                      <Paragraph size="xs" class="opacity-50 uppercase tracking-wide mb-1">Email</Paragraph>
                      <Paragraph id="customer-email-detail" class="font-semibold">Loading...</Paragraph>
                    </div>

                    <div>
                      <Paragraph size="xs" class="opacity-50 uppercase tracking-wide mb-1">Phone</Paragraph>
                      <Paragraph id="customer-phone" class="font-semibold">Loading...</Paragraph>
                    </div>

                    <div>
                      <Paragraph size="xs" class="opacity-50 uppercase tracking-wide mb-1">Address</Paragraph>
                      <div id="customer-address" class="font-semibold">Loading...</div>
                    </div>

                    <div>
                      <Paragraph size="xs" class="opacity-50 uppercase tracking-wide mb-1">Customer Since</Paragraph>
                      <Paragraph id="customer-since" class="font-semibold">Loading...</Paragraph>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Customer Stats -->
              <div class="card bg-base-200 shadow-sm mt-6">
                <div class="card-body">
                  <Heading size="md" class="mb-4">Customer Stats</Heading>

                  <div class="grid grid-cols-2 gap-4">
                    <div class="stat bg-base-100 rounded-lg p-4">
                      <Paragraph size="xxs" class="opacity-50">Total Orders</Paragraph>
                      <Heading size="lg" id="customer-order-count" class="text-primary">0</Heading>
                    </div>
                    <div class="stat bg-base-100 rounded-lg p-4">
                      <Paragraph size="xxs" class="opacity-50">Total Spent</Paragraph>
                      <Heading size="lg" id="customer-total-spent" class="text-accent">â‚¹0</Heading>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Recent Orders -->
            <div class="lg:col-span-2">
              <div class="card bg-base-200 shadow-sm">
                <div class="card-body">
                  <Heading size="md" class="mb-4">Recent Orders</Heading>

                  <div id="orders-empty" class="text-center py-12 hidden">
                    <svg class="w-16 h-16 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
                    </svg>
                    <Heading size="md" class="mb-2">No orders yet</Heading>
                    <Paragraph class="opacity-70">This customer hasn't placed any orders</Paragraph>
                  </div>

                  <div id="orders-container" class="overflow-x-auto">
                    <table class="table table-sm">
                      <thead>
                        <tr>
                          <th>Order ID</th>
                          <th>Date</th>
                          <th>Items</th>
                          <th>Total</th>
                          <th>Status</th>
                        </tr>
                      </thead>
                      <tbody id="orders-tbody">
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<script is:inline define:vars={{ customerId: id }}>
  function formatCurrencyCustomer(amount) {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
    }).format(amount);
  }

  function formatDateCustomer(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      month: "long",
      day: "numeric",
      year: "numeric"
    });
  }

  function formatDateTimeCustomer(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
  }

  function getStatusBadgeCustomer(status) {
    const statusClasses = {
      'pending': 'badge-warning',
      'processing': 'badge-info',
      'shipped': 'badge-primary',
      'delivered': 'badge-success',
      'cancelled': 'badge-error'
    };

    const badgeClass = statusClasses[status.toLowerCase()] || 'badge-neutral';
    return `<span class="badge ${badgeClass} badge-sm">${status}</span>`;
  }

  async function loadCustomerDetails() {
    try {
      console.log("Loading customer details for ID:", customerId);

      const response = await fetch(`/api/customers/${customerId}`);
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error("Customer not found");
        }
        throw new Error("Failed to fetch customer details");
      }

      const customer = await response.json();
      console.log("Customer details loaded:", customer);

      hideLoading();
      renderCustomerDetails(customer);
      renderOrders(customer.orders || []);
    } catch (error) {
      console.error("Error loading customer details:", error);
      showError(error.message || "Failed to load customer details");
    }
  }

  function hideLoading() {
    document.getElementById("customer-loading").classList.add("hidden");
    document.getElementById("customer-details").classList.remove("hidden");
  }

  function showError(message) {
    document.getElementById("customer-loading").classList.add("hidden");
    document.getElementById("customer-error-message").textContent = message;
    document.getElementById("customer-error").classList.remove("hidden");
  }

  function renderCustomerDetails(customer) {
    // Header
    document.getElementById("customer-name").textContent = `${customer.firstName} ${customer.lastName}`;
    document.getElementById("customer-email").textContent = customer.email;

    // Customer Information
    document.getElementById("customer-full-name").textContent = `${customer.firstName} ${customer.lastName}`;
    document.getElementById("customer-email-detail").textContent = customer.email;
    document.getElementById("customer-phone").textContent = customer.phoneNumber || 'Not provided';

    // Address
    const addressEl = document.getElementById("customer-address");
    if (addressEl) {
      addressEl.innerHTML = `
        <div>${customer.address}</div>
        <div>${customer.city}, ${customer.state} ${customer.zipCode}</div>
      `;
    }

    document.getElementById("customer-since").textContent = formatDateCustomer(customer.createdAt);

    // Stats
    document.getElementById("customer-order-count").textContent = customer.orderCount;
    document.getElementById("customer-total-spent").textContent = formatCurrencyCustomer(customer.totalSpent);
  }

  function renderOrders(orders) {
    const tbody = document.getElementById("orders-tbody");
    const ordersContainer = document.getElementById("orders-container");
    const ordersEmpty = document.getElementById("orders-empty");

    if (!orders || orders.length === 0) {
      ordersContainer.classList.add("hidden");
      ordersEmpty.classList.remove("hidden");
      return;
    }

    ordersContainer.classList.remove("hidden");
    ordersEmpty.classList.add("hidden");

    if (tbody) {
      tbody.innerHTML = orders.map(order => `
        <tr class="hover">
          <td class="font-mono text-sm">#${order.id}</td>
          <td class="text-sm">${formatDateTimeCustomer(order.date)}</td>
          <td class="text-center">${order.itemCount}</td>
          <td class="font-semibold">${formatCurrencyCustomer(order.total)}</td>
          <td>${getStatusBadgeCustomer(order.status)}</td>
        </tr>
      `).join('');
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    console.log("Loading customer details page...");
    loadCustomerDetails();
  });
</script>

<style>
  .table th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
</style>