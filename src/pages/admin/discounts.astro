---
import Layout from '@/layouts/Layout.astro';
import ProfileLayout from '@/layouts/ProfileLayout.astro';
import Container from '@/components/ui/Container.astro';
import { DiscountsDataTable } from '@/components/Admin/DiscountsDataTable';
import { requireAdminAuth } from '@/lib/auth-utils';
import AdminBreadcrumbs from '@/components/Admin/AdminBreadcrumbs.astro';

const authResult = await requireAdminAuth(Astro);
if (authResult instanceof Response) {
  return authResult;
}
---

<Layout title="Manobal | Discount Codes">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-8xl mt-20 lg:mt-0 mx-auto">
        <AdminBreadcrumbs
          items={[{ label: 'Discounts' }]}
          pageTitle="Discount Codes"
          pageDescription="Manage discount codes and promotional offers"
        />

        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            <DiscountsDataTable client:load />
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<!-- Add/Edit Discount Modal -->
<dialog id="discountModal" class="modal">
  <div class="modal-box max-w-2xl">
    <h3 class="font-bold text-lg mb-4" id="modalTitle">
      Add New Discount Code
    </h3>

    <form id="discountForm" class="space-y-4">
      <input type="hidden" id="discountId" name="discountId" />

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="form-control">
          <label class="label" for="code">
            <span class="label-text">Discount Code</span>
          </label>
          <input
            type="text"
            id="code"
            name="code"
            required
            class="input input-bordered"
            placeholder="e.g., SAVE20"
            style="text-transform: uppercase"
          />
        </div>

        <div class="form-control">
          <label class="label" for="discountType">
            <span class="label-text">Discount Type</span>
          </label>
          <select
            id="discountType"
            name="discountType"
            required
            class="select select-bordered"
          >
            <option value="">Select type</option>
            <option value="percentage">Percentage (%)</option>
            <option value="fixed">Fixed Amount (₹)</option>
          </select>
        </div>
      </div>

      <div class="form-control">
        <label class="label" for="description">
          <span class="label-text">Description</span>
        </label>
        <textarea
          id="description"
          name="description"
          required
          class="textarea textarea-bordered"
          rows="2"
          placeholder="Brief description of the discount"></textarea>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="form-control">
          <label class="label" for="discountValue">
            <span class="label-text">Discount Value</span>
          </label>
          <input
            type="number"
            id="discountValue"
            name="discountValue"
            required
            min="0"
            step="0.01"
            class="input input-bordered"
            placeholder="Enter value"
          />
        </div>

        <div class="form-control">
          <label class="label" for="minimumOrderAmount">
            <span class="label-text">Minimum Order Amount (₹)</span>
          </label>
          <input
            type="number"
            id="minimumOrderAmount"
            name="minimumOrderAmount"
            required
            min="0"
            step="0.01"
            class="input input-bordered"
            placeholder="0"
          />
        </div>
      </div>

      <div class="form-control">
        <label class="label" for="maxDiscountAmount">
          <span class="label-text">Maximum Discount Amount (₹) - Optional</span>
        </label>
        <input
          type="number"
          id="maxDiscountAmount"
          name="maxDiscountAmount"
          min="0"
          step="0.01"
          class="input input-bordered"
          placeholder="Leave empty for no limit"
        />
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="form-control">
          <label class="label" for="validFrom">
            <span class="label-text">Valid From</span>
          </label>
          <input
            type="date"
            id="validFrom"
            name="validFrom"
            required
            class="input input-bordered"
          />
        </div>

        <div class="form-control">
          <label class="label" for="validTo">
            <span class="label-text">Valid To</span>
          </label>
          <input
            type="date"
            id="validTo"
            name="validTo"
            required
            class="input input-bordered"
          />
        </div>
      </div>

      <div class="form-control">
        <label class="label" for="usageLimit">
          <span class="label-text">Usage Limit - Optional</span>
        </label>
        <input
          type="number"
          id="usageLimit"
          name="usageLimit"
          min="1"
          class="input input-bordered"
          placeholder="Leave empty for unlimited usage"
        />
      </div>

      <div class="form-control">
        <label class="cursor-pointer label">
          <span class="label-text">Active Status</span>
          <input
            type="checkbox"
            id="isActive"
            name="isActive"
            checked
            class="checkbox"
          />
        </label>
      </div>

      <div class="modal-action">
        <button
          type="button"
          class="btn btn-outline"
          onclick="document.getElementById('discountModal').close()"
          >Cancel</button
        >
        <button type="submit" id="saveDiscountBtn" class="btn btn-primary"
          >Save Discount</button
        >
      </div>
    </form>
  </div>
</dialog>

<!-- Toast Container -->
<div class="toast toast-top toast-end z-50" id="toast-container"></div>

<script is:inline>
  // Toast Manager
  class DiscountToastManager {
    constructor() {
      this.container =
        document.getElementById('toast-container') || this.createContainer();
    }

    createContainer() {
      const container = document.createElement('div');
      container.id = 'toast-container';
      container.className = 'toast toast-top toast-end z-50';
      document.body.appendChild(container);
      return container;
    }

    show(message, type = 'info', duration = 4000) {
      const toast = document.createElement('div');

      let alertClass = '';
      let icon = '';

      switch (type) {
        case 'success':
          alertClass = 'alert-success';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case 'error':
          alertClass = 'alert-error';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case 'warning':
          alertClass = 'alert-warning';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" /></svg>`;
          break;
        default:
          alertClass = 'alert-info';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
      }

      toast.className = `alert ${alertClass} shadow-lg mb-2`;
      toast.innerHTML = `
        <div class="flex items-center">
          ${icon}
          <span class="ml-2">${message}</span>
        </div>
        <div class="flex-none">
          <button class="btn btn-sm btn-ghost btn-circle" onclick="this.closest('.alert').remove()">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `;

      this.container.appendChild(toast);

      setTimeout(() => {
        if (toast.parentElement) {
          toast.remove();
        }
      }, duration);
    }
  }

  const discountToastManager = new DiscountToastManager();

  function openDiscountModal(discount = null) {
    const modal = document.getElementById('discountModal');
    const modalTitle = document.getElementById('modalTitle');
    const form = document.getElementById('discountForm');

    if (discount) {
      modalTitle.textContent = 'Edit Discount Code';
      // Populate form with discount data
      document.getElementById('discountId').value = discount.id;
      document.getElementById('code').value = discount.code;
      document.getElementById('description').value = discount.description;
      document.getElementById('discountType').value = discount.discountType;
      document.getElementById('discountValue').value = discount.discountValue;
      document.getElementById('minimumOrderAmount').value =
        discount.minimumOrderAmount;
      document.getElementById('maxDiscountAmount').value =
        discount.maxDiscountAmount || '';
      document.getElementById('validFrom').value =
        discount.validFrom.split('T')[0];
      document.getElementById('validTo').value = discount.validTo.split('T')[0];
      document.getElementById('usageLimit').value = discount.usageLimit || '';
      document.getElementById('isActive').checked = discount.isActive;
    } else {
      modalTitle.textContent = 'Add New Discount Code';
      form.reset();
      document.getElementById('discountId').value = '';
      document.getElementById('isActive').checked = true;
      // Set default dates
      const today = new Date().toISOString().split('T')[0];
      const nextMonth = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
        .toISOString()
        .split('T')[0];
      document.getElementById('validFrom').value = today;
      document.getElementById('validTo').value = nextMonth;
    }

    modal.showModal();
  }

  async function editDiscount(discountId) {
    try {
      const response = await fetch(`/api/coupons/${discountId}`);
      if (!response.ok) throw new Error('Failed to fetch discount details');

      const data = await response.json();
      if (data.success && data.coupon) {
        openDiscountModal(data.coupon);
      } else {
        discountToastManager.show('Failed to load discount details', 'error');
      }
    } catch (error) {
      discountToastManager.show('Failed to load discount details', 'error');
    }
  }

  // Expose functions globally for DataTable component to use
  window.openDiscountModal = openDiscountModal;
  window.editDiscount = editDiscount;

  // Handle form submission
  document
    .getElementById('discountForm')
    ?.addEventListener('submit', async function (e) {
      e.preventDefault();

      const formData = new FormData(this);
      const discountId = formData.get('discountId');
      const isEdit = discountId && discountId !== '';

      const data = {
        code: formData.get('code'),
        description: formData.get('description'),
        discountType: formData.get('discountType'),
        discountValue: parseFloat(formData.get('discountValue')),
        minimumOrderAmount: parseFloat(formData.get('minimumOrderAmount')),
        maxDiscountAmount: formData.get('maxDiscountAmount')
          ? parseFloat(formData.get('maxDiscountAmount'))
          : null,
        validFrom: formData.get('validFrom'),
        validTo: formData.get('validTo'),
        usageLimit: formData.get('usageLimit')
          ? parseInt(formData.get('usageLimit'))
          : null,
        isActive: formData.has('isActive'),
      };

      const saveBtn = document.getElementById('saveDiscountBtn');
      const originalText = saveBtn.textContent;
      saveBtn.disabled = true;
      saveBtn.textContent = isEdit ? 'Updating...' : 'Creating...';

      try {
        const url = isEdit ? `/api/coupons/${discountId}` : '/api/coupons';
        const method = isEdit ? 'PUT' : 'POST';

        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) throw new Error('Failed to save discount');

        const result = await response.json();
        if (result.success) {
          discountToastManager.show(
            `Discount ${isEdit ? 'updated' : 'created'} successfully`,
            'success'
          );
          document.getElementById('discountModal').close();
          // Refresh the DataTable
          if (window.loadDiscounts) {
            window.loadDiscounts();
          }
        } else {
          throw new Error(result.error || 'Failed to save discount');
        }
      } catch (error) {
        discountToastManager.show(
          'Failed to save discount: ' + error.message,
          'error'
        );
      } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = originalText;
      }
    });
</script>

<style>
  .table th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .input-group input:focus {
    outline: none;
    border-color: oklch(var(--p));
  }

  #code {
    text-transform: uppercase !important;
  }
</style>
