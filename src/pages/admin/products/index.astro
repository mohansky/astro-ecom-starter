---
import Layout from '@/layouts/Layout.astro';
import ProfileLayout from '@/layouts/ProfileLayout.astro';
import Container from '@/components/ui/Container.astro';
import Heading from '@/components/ui/Heading.astro';
import Paragraph from '@/components/ui/Paragraph.astro';
import { getUser } from '@/lib/auth-utils';
import { migrateTaxFields, migrateSlugField, migrateSKUField } from '@/lib/db';
import { Icon } from 'astro-icon/components';

const user = await getUser(Astro);

// Run migrations on first load
await migrateTaxFields();
await migrateSlugField();
await migrateSKUField();

if (!user) {
  return Astro.redirect('/admin/login');
}

if (!user.emailVerified) {
  return Astro.redirect('/emailVerification');
}
---

<Layout title="Products">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-8xl mt-20 lg:mt-0 mx-auto">
        <div class="mb-8">
          <Heading size="xl" class="mb-2">Products Management</Heading>
          <Paragraph class="opacity-70"
            >View and manage product inventory</Paragraph
          >
        </div>

        <div class="card bg-base-200 shadow-sm w-full">
          <div class="card-body">
            <!-- Action Buttons and Search Section -->
            <div class="flex flex-col lg:flex-row gap-4 mb-6">
              <div class="flex gap-2">
                <button id="addProductBtn" class="btn btn-primary">
                  <svg
                    class="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 4v16m8-8H4"></path>
                  </svg>
                  Add Product
                </button>
                <button id="uploadCsvBtn" class="btn btn-secondary">
                  <svg
                    class="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                    ></path>
                  </svg>
                  Upload CSV
                </button>
              </div>

              <div class="flex-1">
                <div class="form-control">
                  <div class="input-group">
                    <label class="input">
                      <svg
                        class="h-[1em] opacity-50"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                      >
                        <g
                          stroke-linejoin="round"
                          stroke-linecap="round"
                          stroke-width="2.5"
                          fill="none"
                          stroke="currentColor"
                        >
                          <circle cx="11" cy="11" r="8"></circle>
                          <path d="m21 21-4.3-4.3"></path>
                        </g>
                      </svg>
                      <input
                        type="text"
                        id="productSearch"
                        placeholder="Search products by name, description, or category..."
                        class="input input-bordered w-full"
                      />
                    </label>
                  </div>
                </div>
              </div>
              <div class="flex gap-2">
                <select id="categoryFilter" class="select select-bordered">
                  <option value="">All Categories</option>
                </select>
                <button id="clearFilter" class="btn btn-outline">Clear</button>
                <button id="refreshBtn" class="btn btn-outline">
                  <svg
                    class="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    ></path>
                  </svg>
                  Refresh
                </button>
              </div>
            </div>

            <!-- Loading State -->
            <div
              id="products-loading"
              class="flex items-center justify-center h-32"
            >
              <span class="loading loading-spinner loading-lg"></span>
            </div>

            <!-- Error State -->
            <div id="products-error" class="alert alert-error hidden">
              <span id="products-error-message">Failed to load products</span>
            </div>

            <!-- Empty State -->
            <div id="products-empty" class="text-center py-12 hidden">
              <svg
                class="w-16 h-16 mx-auto mb-4 opacity-50"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                ></path>
              </svg>
              <Heading size="md" class="mb-2">No products found</Heading>
              <Paragraph class="opacity-70"
                >Try adjusting your search criteria</Paragraph
              >
            </div>

            <!-- Results Section -->
            <div id="products-container" class="hidden">
              <div class="flex justify-between items-center mb-4">
                <Paragraph
                  size="sm"
                  id="products-results-count"
                  class="opacity-70">Loading...</Paragraph
                >
                <div class="flex gap-2">
                  <button id="prevPage" class="btn btn-sm btn-outline" disabled
                    >Previous</button
                  >
                  <button id="nextPage" class="btn btn-sm btn-outline" disabled
                    >Next</button
                  >
                </div>
              </div>

              <div class="overflow-x-auto">
                <table class="table table-sm">
                  <thead>
                    <tr>
                      <th>Image</th>
                      <th>Name</th>
                      <th>Category</th>
                      <th>Price</th>
                      <th>MRP</th>
                      <th>Stock</th>
                      <th>Weight</th>
                      <th>Status</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="products-tbody"> </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<!-- Toast Container -->
<div class="toast toast-top toast-end z-50" id="toast-container"></div>

<!-- Product Form Modal -->
<dialog id="productModal" class="modal">
  <div class="modal-box w-11/12 max-w-2xl">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >âœ•</button
      >
    </form>
    <h3 class="font-bold text-lg mb-4" id="modalTitle">Add Product</h3>

    <form id="productForm" class="space-y-4">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
        <div class="form-control col-span-2">
          <label class="label">
            <span class="label-text">Name *</span>
          </label>
          <input
            type="text"
            id="productName"
            name="name"
            class="input input-bordered"
            required
          />
        </div>

        <div class="form-control col-span-2">
          <label class="label">
            <span class="label-text">Slug</span>
            <span class="label-text-alt text-xs opacity-50"
              >(Auto-generated from name if empty)</span
            >
          </label>
          <input
            type="text"
            id="productSlug"
            name="slug"
            class="input input-bordered"
            placeholder="Auto-generated from name"
          />
        </div>

        <div class="form-control col-span-2">
          <label class="label">
            <span class="label-text">SKU</span>
            <span class="label-text-alt text-xs opacity-50"
              >(Auto-generated if empty)</span
            >
          </label>
          <input
            type="text"
            id="productSku"
            name="sku"
            class="input input-bordered"
            placeholder="Auto-generated from name + category + ID"
          />
        </div>

        <div class="flex gap-4">
          <div class="form-control">
            <label class="label cursor-pointer">
              <span class="label-text">Active</span>
              <input
                type="checkbox"
                id="productIsActive"
                name="isActive"
                class="checkbox"
                checked
              />
            </label>
          </div>

          <div class="form-control">
            <label class="label cursor-pointer">
              <span class="label-text">Featured</span>
              <input
                type="checkbox"
                id="productFeatured"
                name="featured"
                class="checkbox"
              />
            </label>
          </div>
        </div>

        <div class="form-control col-span-4">
          <label class="label">
            <span class="label-text">Product Image</span>
          </label>
          <div class="flex gap-2">
            <div id="imagePreview" class="mt-2 hidden relative">
              <div id="imageUploadStatus" class="text-xs mt-1 hidden"></div>
              <img
                id="previewImg"
                class="w-24 h-24 object-cover rounded"
                alt="Preview"
              />
              <button
                type="button"
                id="removeImageBtn"
                class="absolute bottom-0 right-0 btn btn-xs btn-error mt-1"
              >
                <Icon name="fa6-solid:trash-can" class="w-4 h-4" />
              </button>
            </div>
            <div class="flex flex-grow items-center justify-center gap-2">
              <input
                type="file"
                id="productImageFile"
                accept="image/jpeg,image/png,image/webp"
                class="file-input file-input-bordered flex-1"
              />
              <button
                type="button"
                id="uploadImageBtn"
                class="btn btn-primary"
                disabled
              >
                <svg
                  class="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                  ></path>
                </svg>
                Upload
              </button>
            </div>
            <input type="hidden" id="productImagePath" name="imagePath" />
          </div>
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Category *</span>
          </label>
          <input
            type="text"
            id="productCategory"
            name="category"
            class="input input-bordered"
            required
          />
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Subcategory</span>
          </label>
          <input
            type="text"
            id="productSubcategory"
            name="subcategory"
            class="input input-bordered"
          />
        </div>

        <div class="form-control flex flex-col">
          <label class="label">
            <span class="label-text">Tags</span>
          </label>
          <input
            type="text"
            id="productTags"
            name="tags"
            class="input input-bordered"
            placeholder="comma,separated,tags"
          />
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Stock</span>
          </label>
          <input
            type="number"
            id="productStock"
            name="stock"
            class="input input-bordered"
          />
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Price *</span>
          </label>
          <input
            type="number"
            step="0.01"
            id="productPrice"
            name="price"
            class="input input-bordered"
            required
          />
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">MRP (optional)</span>
          </label>
          <input
            type="number"
            step="0.01"
            id="productMrp"
            name="mrp"
            class="input input-bordered"
            required
          />
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">GST Percentage (%)</span>
          </label>
          <input
            type="number"
            step="0.01"
            id="productGstPercentage"
            name="gstPercentage"
            class="input input-bordered"
            value="5"
            required
          />

          <label class="label cursor-pointer mt-1">
            <span class="label-text">Price includes tax</span>
            <input
              type="checkbox"
              id="productTaxInclusive"
              name="taxInclusive"
              class="checkbox"
            />
          </label>
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Weight (grams)</span>
          </label>
          <input
            type="number"
            step="0.01"
            id="productWeight"
            name="weight"
            class="input input-bordered"
          />
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Dimensions</span>
          </label>
          <input
            type="text"
            id="productDimensions"
            name="dimensions"
            class="input input-bordered"
          />
        </div>

        <!-- <div class="flex gap-4 mt-5">
          <div class="form-control">
            <label class="label cursor-pointer">
              <span class="label-text">Active</span>
              <input
                type="checkbox"
                id="productIsActive"
                name="isActive"
                class="checkbox"
                checked
              />
            </label>
          </div>

          <div class="form-control">
            <label class="label cursor-pointer">
              <span class="label-text">Featured</span>
              <input
                type="checkbox"
                id="productFeatured"
                name="featured"
                class="checkbox"
              />
            </label>
          </div>
        </div> -->
        <div class="form-control col-span-2">
          <label class="label">
            <span class="label-text">Description</span>
          </label>
          <textarea
            id="productDescription"
            name="description"
            class="textarea textarea-bordered"
            rows="3"></textarea>
        </div>
      </div>

      <div class="modal-action">
        <button
          type="button"
          class="btn btn-ghost"
          onclick="document.getElementById('productModal').close()"
          >Cancel</button
        >
        <button type="submit" class="btn btn-primary" id="submitProductBtn"
          >Save Product</button
        >
      </div>
    </form>
  </div>
</dialog>

<!-- CSV Upload Modal -->
<dialog id="csvModal" class="modal">
  <div class="modal-box">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >âœ•</button
      >
    </form>
    <h3 class="font-bold text-lg mb-4">Upload CSV</h3>

    <div class="space-y-4">
      <div class="alert alert-info">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          class="stroke-current shrink-0 w-6 h-6"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          ></path></svg
        >
        <div>
          <div class="text-sm">
            CSV should contain columns: name, category, price, mrp<br />
            Optional: description, subcategory, stock, weight, dimensions, image,
            tags, active, featured
          </div>
        </div>
      </div>

      <form id="csvForm" enctype="multipart/form-data">
        <div class="form-control">
          <label class="label">
            <span class="label-text">Select CSV File</span>
          </label>
          <input
            type="file"
            id="csvFile"
            name="csv"
            accept=".csv"
            class="file-input file-input-bordered w-full"
            required
          />
        </div>

        <div class="modal-action">
          <button
            type="button"
            class="btn btn-ghost"
            onclick="document.getElementById('csvModal').close()">Cancel</button
          >
          <button type="submit" class="btn btn-primary" id="uploadCsvSubmitBtn"
            >Upload & Import</button
          >
        </div>
      </form>
    </div>
  </div>
</dialog>

<!-- Delete Confirmation Modal -->
<dialog id="deleteModal" class="modal">
  <div class="modal-box">
    <h3 class="font-bold text-lg">Confirm Delete</h3>
    <p class="py-4">
      Are you sure you want to delete this product? This action cannot be
      undone.
    </p>
    <div class="modal-action">
      <button
        class="btn btn-ghost"
        onclick="document.getElementById('deleteModal').close()">Cancel</button
      >
      <button class="btn btn-error" id="confirmDeleteBtn">Delete</button>
    </div>
  </div>
</dialog>

<script is:inline>
  let currentProductPage = 0;
  let currentProductSearch = '';
  let currentProductCategory = '';
  let isProductsLoading = false;
  let productsPagination = { total: 0, limit: 20, offset: 0, hasMore: false };
  let productCategories = [];

  // Toast Manager
  class ToastManager {
    constructor() {
      this.container =
        document.getElementById('toast-container') || this.createContainer();
    }

    createContainer() {
      const container = document.createElement('div');
      container.id = 'toast-container';
      container.className = 'toast toast-top toast-end z-50';
      document.body.appendChild(container);
      return container;
    }

    show(message, type = 'info', duration = 4000) {
      const toast = document.createElement('div');

      let alertClass = '';
      let icon = '';

      switch (type) {
        case 'success':
          alertClass = 'alert-success';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case 'error':
          alertClass = 'alert-error';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case 'warning':
          alertClass = 'alert-warning';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4.5c-.77-.833-2.694-.833-3.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z" /></svg>`;
          break;
        default:
          alertClass = 'alert-info';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
      }

      toast.className = `alert ${alertClass} shadow-lg mb-2`;
      toast.innerHTML = `
        <div class="flex items-center">
          ${icon}
          <span class="ml-2">${message}</span>
        </div>
      `;

      this.container.appendChild(toast);

      setTimeout(() => {
        if (toast.parentElement) {
          toast.remove();
        }
      }, duration);
    }
  }

  const toastManager = new ToastManager();

  function formatCurrencyProducts(amount) {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
    }).format(amount);
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  async function loadProducts(search = '', category = '', offset = 0) {
    if (isProductsLoading) return;
    isProductsLoading = true;

    try {
      showProductsLoading();

      const params = new URLSearchParams({
        limit: '20',
        offset: offset.toString(),
      });

      if (search.trim()) {
        params.set('search', search.trim());
      }

      if (category.trim()) {
        params.set('category', category.trim());
      }

      const response = await fetch(`/api/products?${params}`);
      if (!response.ok) throw new Error('Failed to fetch products');

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Failed to load products');
      }

      if (!data.products || data.products.length === 0) {
        showProductsEmpty();
        return;
      }

      productsPagination = data.pagination;
      productCategories = data.categories || [];
      currentProductSearch = search;
      currentProductCategory = category;
      currentProductPage = Math.floor(offset / productsPagination.limit);

      hideProductsLoading();
      renderProducts(data.products);
      updateProductsPagination();
      updateCategoryFilter();
    } catch (error) {
      console.error('Error loading products:', error);
      showProductsError('Failed to load products');
    } finally {
      isProductsLoading = false;
    }
  }

  function showProductsLoading() {
    document.getElementById('products-loading').classList.remove('hidden');
    document.getElementById('products-container').classList.add('hidden');
    document.getElementById('products-error').classList.add('hidden');
    document.getElementById('products-empty').classList.add('hidden');
  }

  function hideProductsLoading() {
    document.getElementById('products-loading').classList.add('hidden');
    document.getElementById('products-container').classList.remove('hidden');
  }

  function showProductsError(message) {
    document.getElementById('products-loading').classList.add('hidden');
    document.getElementById('products-container').classList.add('hidden');
    document.getElementById('products-empty').classList.add('hidden');
    document.getElementById('products-error-message').textContent = message;
    document.getElementById('products-error').classList.remove('hidden');
  }

  function showProductsEmpty() {
    document.getElementById('products-loading').classList.add('hidden');
    document.getElementById('products-container').classList.add('hidden');
    document.getElementById('products-error').classList.add('hidden');
    document.getElementById('products-empty').classList.remove('hidden');
  }

  function renderProducts(products) {
    const tbody = document.getElementById('products-tbody');
    if (!tbody) return;

    tbody.innerHTML = products
      .map(
        (product, index) => `
      <tr class="hover:bg-base-100">
        <td>
          <div class="avatar">
            <div class="mask mask-squircle w-12 h-12 bg-base-300 flex items-center justify-center relative overflow-hidden">
              <img
                id="product-image-${index}"
                alt="${product.name}"
                class="w-full h-full object-cover hidden"
              />
              <div id="product-fallback-${index}" class="w-full h-full flex items-center justify-center" style="position: absolute; top: 0; left: 0;">
                <svg class="w-6 h-6 text-base-content/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
                  <circle cx="9" cy="9" r="2" />
                  <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />
                </svg>
              </div>
            </div>
          </div>
        </td>
        <td>
          <div class="font-semibold max-w-48 truncate">${product.name}</div>
          <div class="text-sm opacity-70 max-w-48 truncate">SKU: ${product.sku || 'N/A'}</div>
        </td>
        <td>
          <span class="badge badge-outline">${product.category}</span>
          ${product.subcategory ? `<div class="text-xs opacity-70 mt-1">${product.subcategory}</div>` : ''}
        </td>
        <td class="font-semibold">${formatCurrencyProducts(product.price)}</td>
        <td class="text-sm opacity-70">${formatCurrencyProducts(product.mrp)}</td>
        <td class="text-center">
          <span class="badge ${product.stock > 0 ? (product.stock > 10 ? 'badge-success' : 'badge-warning') : 'badge-error'}">
            ${product.stock}
          </span>
        </td>
        <td class="text-sm">${product.weight}g</td>
        <td>
          <span class="badge ${product.isActive ? 'badge-success' : 'badge-error'}">
            ${product.isActive ? 'Active' : 'Inactive'}
          </span>
        </td>
        <td>
          <details class="dropdown dropdown-end">
  <summary class="btn btn-circle m-1">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-ellipsis-vertical-icon lucide-ellipsis-vertical"><circle cx="12" cy="12" r="1"/><circle cx="12" cy="5" r="1"/><circle cx="12" cy="19" r="1"/></svg>
  </summary>
  <ul
      class="menu dropdown-content bg-base-100 rounded-box z-1 p-2 space-y-1 shadow-sm"
    >
      <li>
        <button
          class="btn btn-xs btn-primary"
          onclick="viewProduct('${product.id}'); closeDropdown(this)"
          title="View Details"
        >
          <svg
            class="w-3 h-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
            ></path>
          </svg>
          View
        </button>
      </li>
      <li>
        <button
          class="btn btn-xs btn-outline"
          onclick="editProduct('${product.id}'); closeDropdown(this)"
          title="Quick Edit"
        >
          <svg
            class="w-3 h-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            ></path>
          </svg>
          Edit
        </button>
      </li>
      <li>
        <button
          class="btn btn-xs btn-error"
          onclick="deleteProduct('${product.id}'); closeDropdown(this)"
        >
          <svg
            class="w-3 h-3"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
            ></path>
          </svg>
          Delete
        </button>
      </li>
    </ul>
</details>

        </td>
      </tr>
    `
      )
      .join('');

    // Update results count
    const resultsCount = document.getElementById('products-results-count');
    if (resultsCount) {
      const start = productsPagination.offset + 1;
      const end = Math.min(
        productsPagination.offset + productsPagination.limit,
        productsPagination.total
      );
      resultsCount.textContent = `Showing ${start}-${end} of ${productsPagination.total} products`;
    }

    // Load images for each product
    products.forEach(async (product, index) => {
      if (product.imagePath) {
        await loadProductImage(product.imagePath, index);
      }
    });
  }

  async function loadProductImage(imagePath, index) {
    try {
      // Construct the R2 image URL based on the folder pattern
      // imagePath should be the folder name, and the image file has the same name as the folder
      const r2BucketUrl = 'https://pub-67b76734f5b543b9925c0870089929bb.r2.dev';
      const imageUrl = `${r2BucketUrl}/products/${imagePath}/${imagePath}.jpg`;

      const imgElement = document.getElementById(`product-image-${index}`);
      const fallbackElement = document.getElementById(
        `product-fallback-${index}`
      );

      if (imgElement && fallbackElement) {
        imgElement.src = imageUrl;
        imgElement.onload = function () {
          imgElement.classList.remove('hidden');
          fallbackElement.classList.add('hidden');
        };
        imgElement.onerror = function () {
          // Keep fallback visible if image fails to load
          imgElement.classList.add('hidden');
          fallbackElement.classList.remove('hidden');
        };
      }
    } catch (error) {
      console.error(`Error loading image for ${imagePath}:`, error);
      // Keep fallback visible on error
    }
  }

  function updateProductsPagination() {
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    if (prevBtn) {
      prevBtn.disabled = productsPagination.offset === 0;
    }

    if (nextBtn) {
      nextBtn.disabled = !productsPagination.hasMore;
    }
  }

  function updateCategoryFilter() {
    const categorySelect = document.getElementById('categoryFilter');
    if (!categorySelect || !productCategories) return;

    // Keep current selection
    const currentValue = categorySelect.value;

    categorySelect.innerHTML =
      '<option value="">All Categories</option>' +
      productCategories
        .map(
          (category) =>
            `<option value="${category}" ${category === currentValue ? 'selected' : ''}>${category}</option>`
        )
        .join('');
  }

  // Debounced search function
  const debouncedProductSearch = debounce((search) => {
    loadProducts(search, currentProductCategory, 0);
  }, 300);

  // Global variables for CRUD operations
  let currentEditingProductId = null;
  let currentDeletingProductId = null;

  function setupProductsEventListeners() {
    const searchInput = document.getElementById('productSearch');
    const searchBtn = null; // No separate search button with new design
    const categoryFilter = document.getElementById('categoryFilter');
    const clearBtn = document.getElementById('clearFilter');
    const refreshBtn = document.getElementById('refreshBtn');
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');

    // New buttons
    const addProductBtn = document.getElementById('addProductBtn');
    const uploadCsvBtn = document.getElementById('uploadCsvBtn');

    // Image upload elements
    const imageFileInput = document.getElementById('productImageFile');
    const uploadImageBtn = document.getElementById('uploadImageBtn');
    const imageUploadStatus = document.getElementById('imageUploadStatus');
    const imagePreview = document.getElementById('imagePreview');
    const previewImg = document.getElementById('previewImg');
    const removeImageBtn = document.getElementById('removeImageBtn');

    // Image upload event listeners
    if (imageFileInput) {
      imageFileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          uploadImageBtn.disabled = false;

          // Show file preview
          const reader = new FileReader();
          reader.onload = (e) => {
            previewImg.src = e.target.result;
            imagePreview.classList.remove('hidden');
          };
          reader.readAsDataURL(file);
        } else {
          uploadImageBtn.disabled = true;
          imagePreview.classList.add('hidden');
        }
      });
    }

    if (uploadImageBtn) {
      uploadImageBtn.addEventListener('click', async () => {
        await uploadProductImage();
      });
    }

    if (removeImageBtn) {
      removeImageBtn.addEventListener('click', () => {
        clearProductImage();
      });
    }

    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        debouncedProductSearch(e.target.value);
      });

      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          loadProducts(e.target.value, currentProductCategory, 0);
        }
      });
    }

    if (searchBtn) {
      searchBtn.addEventListener('click', () => {
        const search = searchInput?.value || '';
        loadProducts(search, currentProductCategory, 0);
      });
    }

    if (categoryFilter) {
      categoryFilter.addEventListener('change', (e) => {
        loadProducts(currentProductSearch, e.target.value, 0);
      });
    }

    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        if (searchInput) {
          searchInput.value = '';
        }
        if (categoryFilter) {
          categoryFilter.value = '';
        }
        loadProducts('', '', 0);
      });
    }

    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        const search = searchInput?.value || '';
        const category = categoryFilter?.value || '';
        loadProducts(search, category, productsPagination.offset);
      });
    }

    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        if (productsPagination.offset > 0) {
          loadProducts(
            currentProductSearch,
            currentProductCategory,
            productsPagination.offset - productsPagination.limit
          );
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (productsPagination.hasMore) {
          loadProducts(
            currentProductSearch,
            currentProductCategory,
            productsPagination.offset + productsPagination.limit
          );
        }
      });
    }

    // Add Product button
    if (addProductBtn) {
      addProductBtn.addEventListener('click', () => {
        openProductModal();
      });
    }

    // Upload CSV button
    if (uploadCsvBtn) {
      uploadCsvBtn.addEventListener('click', () => {
        document.getElementById('csvModal').showModal();
      });
    }

    // Product form submission
    const productForm = document.getElementById('productForm');
    if (productForm) {
      productForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await saveProduct();
      });
    }

    // CSV form submission
    const csvForm = document.getElementById('csvForm');
    if (csvForm) {
      csvForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await uploadCsv();
      });
    }

    // Delete confirmation
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    if (confirmDeleteBtn) {
      confirmDeleteBtn.addEventListener('click', async () => {
        if (currentDeletingProductId) {
          await confirmDeleteProduct();
        }
      });
    }
  }

  // Image Upload Functions
  async function uploadProductImage() {
    const fileInput = document.getElementById('productImageFile');
    const uploadBtn = document.getElementById('uploadImageBtn');
    const statusDiv = document.getElementById('imageUploadStatus');
    const productNameInput = document.getElementById('productName');

    if (!fileInput.files[0]) {
      toastManager.show('Please select an image file', 'error');
      return;
    }

    if (!productNameInput.value.trim()) {
      toastManager.show('Please enter a product name first', 'error');
      productNameInput.focus();
      return;
    }

    try {
      // Show loading state
      uploadBtn.disabled = true;
      uploadBtn.innerHTML =
        '<span class="loading loading-spinner loading-sm"></span> Uploading...';
      statusDiv.textContent = 'Uploading image...';
      statusDiv.className = 'text-xs mt-1 text-info';
      statusDiv.classList.remove('hidden');

      const formData = new FormData();
      formData.append('image', fileInput.files[0]);
      formData.append('productName', productNameInput.value.trim());

      const response = await fetch('/api/products/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (result.success) {
        // Set the image path in the hidden field
        document.getElementById('productImagePath').value = result.imagePath;

        // Update status
        statusDiv.textContent = 'Image uploaded!';
        statusDiv.className = 'text-xs mt-1 text-success';

        // Update preview image to show the uploaded image
        const previewImg = document.getElementById('previewImg');
        previewImg.src = result.url;

        // Clear file input
        fileInput.value = '';

        toastManager.show('Image uploaded successfully!', 'success');
      } else {
        throw new Error(result.error || 'Upload failed');
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      statusDiv.textContent = `Upload failed: ${error.message}`;
      statusDiv.className = 'text-sm mt-1 text-error';
      toastManager.show('Failed to upload image', 'error');
    } finally {
      // Reset button state
      uploadBtn.disabled = false;
      uploadBtn.innerHTML =
        '<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>Upload';
    }
  }

  function clearProductImage() {
    const fileInput = document.getElementById('productImageFile');
    const imagePathInput = document.getElementById('productImagePath');
    const statusDiv = document.getElementById('imageUploadStatus');
    const imagePreview = document.getElementById('imagePreview');
    const uploadBtn = document.getElementById('uploadImageBtn');

    // Clear all image-related fields
    fileInput.value = '';
    imagePathInput.value = '';
    statusDiv.classList.add('hidden');
    imagePreview.classList.add('hidden');
    uploadBtn.disabled = true;
  }

  // CRUD Functions
  function openProductModal(productId = null) {
    currentEditingProductId = productId;
    const modal = document.getElementById('productModal');
    const modalTitle = document.getElementById('modalTitle');
    const submitBtn = document.getElementById('submitProductBtn');

    if (productId) {
      modalTitle.textContent = 'Edit Product';
      submitBtn.textContent = 'Update Product';
      // Load product data for editing
      loadProductForEdit(productId);
    } else {
      modalTitle.textContent = 'Add Product';
      submitBtn.textContent = 'Save Product';
      clearProductForm();
    }

    modal.showModal();
  }

  async function loadProductForEdit(productId) {
    try {
      const response = await fetch(`/api/products?id=${productId}`);
      const data = await response.json();

      if (data.success && data.products && data.products.length > 0) {
        const product = data.products[0];

        document.getElementById('productName').value = product.name || '';
        document.getElementById('productSlug').value = product.slug || '';
        document.getElementById('productSku').value = product.sku || '';
        document.getElementById('productDescription').value =
          product.description || '';
        document.getElementById('productCategory').value =
          product.category || '';
        document.getElementById('productSubcategory').value =
          product.subcategory || '';
        document.getElementById('productPrice').value = product.price || '';
        document.getElementById('productMrp').value = product.mrp || '';
        document.getElementById('productStock').value = product.stock || '';
        document.getElementById('productWeight').value = product.weight || '';
        document.getElementById('productGstPercentage').value =
          product.gstPercentage || '5';
        document.getElementById('productTaxInclusive').checked =
          product.taxInclusive || false;
        document.getElementById('productDimensions').value =
          product.dimensions || '';
        document.getElementById('productImagePath').value =
          product.imagePath || '';
        document.getElementById('productTags').value = product.tags || '';
        document.getElementById('productIsActive').checked = product.isActive;
        document.getElementById('productFeatured').checked = product.featured;

        // Handle existing image preview
        if (product.imagePath) {
          const previewImg = document.getElementById('previewImg');
          const imagePreview = document.getElementById('imagePreview');
          const r2BucketUrl =
            'https://pub-67b76734f5b543b9925c0870089929bb.r2.dev';
          const imageUrl = `${r2BucketUrl}/products/${product.imagePath}/${product.imagePath}.jpg`;

          previewImg.src = imageUrl;
          imagePreview.classList.remove('hidden');

          const statusDiv = document.getElementById('imageUploadStatus');
          statusDiv.textContent = 'Image loaded';
          statusDiv.className = 'text-xs mt-1 text-success';
          statusDiv.classList.remove('hidden');
        }
      }
    } catch (error) {
      console.error('Error loading product for edit:', error);
      toastManager.show('Failed to load product data', 'error');
    }
  }

  function clearProductForm() {
    document.getElementById('productForm').reset();
    document.getElementById('productIsActive').checked = true;
    document.getElementById('productFeatured').checked = false;
    clearProductImage();
  }

  async function saveProduct() {
    try {
      const submitBtn = document.getElementById('submitProductBtn');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = 'Saving...';

      const formData = new FormData(document.getElementById('productForm'));
      const productData = {};

      for (const [key, value] of formData.entries()) {
        if (
          key === 'isActive' ||
          key === 'featured' ||
          key === 'taxInclusive'
        ) {
          productData[key] = formData.has(key);
        } else if (value.trim() !== '') {
          productData[key] = value;
        }
      }

      const url = currentEditingProductId
        ? `/api/products?id=${currentEditingProductId}`
        : '/api/products';

      const method = currentEditingProductId ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(productData),
      });

      const result = await response.json();

      if (result.success) {
        document.getElementById('productModal').close();
        loadProducts(
          currentProductSearch,
          currentProductCategory,
          productsPagination.offset
        );
        toastManager.show(
          currentEditingProductId
            ? 'Product updated successfully!'
            : 'Product created successfully!',
          'success'
        );
      } else {
        toastManager.show(
          'Error: ' + (result.error || 'Failed to save product'),
          'error'
        );
      }
    } catch (error) {
      console.error('Error saving product:', error);
      toastManager.show('Failed to save product', 'error');
    } finally {
      const submitBtn = document.getElementById('submitProductBtn');
      submitBtn.disabled = false;
      submitBtn.textContent = currentEditingProductId
        ? 'Update Product'
        : 'Save Product';
    }
  }

  async function uploadCsv() {
    try {
      const submitBtn = document.getElementById('uploadCsvSubmitBtn');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = 'Uploading...';

      const formData = new FormData(document.getElementById('csvForm'));

      const response = await fetch('/api/products/upload-csv', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (result.success) {
        document.getElementById('csvModal').close();
        document.getElementById('csvForm').reset();
        loadProducts(); // Reload products list
        toastManager.show(
          `Success! Imported ${result.imported} products.`,
          'success',
          5000
        );
        if (result.errors && result.errors.length > 0) {
          setTimeout(() => {
            toastManager.show(
              `${result.errors.length} warnings occurred during import`,
              'warning',
              5000
            );
          }, 1000);
        }
      } else {
        toastManager.show(
          'Error: ' + (result.error || 'Failed to upload CSV'),
          'error'
        );
      }
    } catch (error) {
      console.error('Error uploading CSV:', error);
      toastManager.show('Failed to upload CSV', 'error');
    } finally {
      const submitBtn = document.getElementById('uploadCsvSubmitBtn');
      submitBtn.disabled = false;
      submitBtn.textContent = 'Upload & Import';
    }
  }

  function viewProduct(productId) {
    window.location.href = `/admin/products/${productId}`;
  }

  function editProduct(productId) {
    openProductModal(productId);
  }

  function deleteProduct(productId) {
    currentDeletingProductId = productId;
    document.getElementById('deleteModal').showModal();
  }

  async function confirmDeleteProduct() {
    try {
      const response = await fetch(
        `/api/products?id=${currentDeletingProductId}`,
        {
          method: 'DELETE',
        }
      );

      const result = await response.json();

      if (result.success) {
        document.getElementById('deleteModal').close();
        loadProducts(
          currentProductSearch,
          currentProductCategory,
          productsPagination.offset
        );
        toastManager.show('Product deleted successfully!', 'success');
      } else {
        toastManager.show(
          'Error: ' + (result.error || 'Failed to delete product'),
          'error'
        );
      }
    } catch (error) {
      console.error('Error deleting product:', error);
      toastManager.show('Failed to delete product', 'error');
    } finally {
      currentDeletingProductId = null;
    }
  }

  // Dropdown utilities
  function closeDropdown(button) {
    const dropdown = button.closest('details');
    if (dropdown) {
      dropdown.removeAttribute('open');
    }
  }

  // Close dropdowns when clicking outside
  document.addEventListener('click', function (e) {
    const openDropdowns = document.querySelectorAll('details[open]');
    openDropdowns.forEach((dropdown) => {
      if (!dropdown.contains(e.target)) {
        dropdown.removeAttribute('open');
      }
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    setupProductsEventListeners();
    loadProducts();
  });
</script>

<style>
  .table th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .input-group input:focus {
    outline: none;
    border-color: oklch(var(--p));
  }
</style>
