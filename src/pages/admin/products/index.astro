---
import Layout from '@/layouts/Layout.astro';
import ProfileLayout from '@/layouts/ProfileLayout.astro';
import Container from '@/components/ui/Container.astro';
import { getUser } from '@/lib/auth-utils';
import { migrateTaxFields, migrateSlugField, migrateSKUField } from '@/lib/db';
import { ProductsDataTable } from '@/components/Admin/ProductsDataTable';
import AdminBreadcrumbs from '@/components/Admin/AdminBreadcrumbs.astro';
import { ProductManager } from '@/components/Admin/ProductManager';

const user = await getUser(Astro);

// Run migrations on first load
await migrateTaxFields();
await migrateSlugField();
await migrateSKUField();

if (!user) {
  return Astro.redirect('/admin/login');
}

if (!user.emailVerified) {
  return Astro.redirect('/emailVerification');
}
---

<Layout title="Manobal | Products">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-8xl mt-20 lg:mt-0 mx-auto">
        <AdminBreadcrumbs
          items={[{ label: 'Products' }]}
          pageTitle="Products Management"
          pageDescription="View and manage product inventory"
        />

        <div class="card bg-base-100 shadow-sm w-full">
          <div class="card-body">
            <ProductsDataTable
              client:load
              r2BucketUrl={import.meta.env.R2_BUCKET_URL}
            />
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<!-- React Product Manager with integrated Sonner Toasts -->
<ProductManager client:load />

<!-- CSV Upload Modal -->
<dialog id="csvModal" class="modal">
  <div class="modal-box">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >✕</button
      >
    </form>
    <h3 class="font-bold text-lg mb-4">Upload CSV</h3>

    <div class="space-y-4">
      <div class="alert alert-warning">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          class="stroke-current shrink-0 w-6 h-6"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"
          ></path></svg
        >
        <div>
          <div class="font-semibold">⚠️ WARNING: This may replace existing products!</div>
          <div class="text-sm mt-1">Products with the same name may be overwritten. This action cannot be undone.</div>
        </div>
      </div>

      <div class="alert alert-info">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          class="stroke-current shrink-0 w-6 h-6"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          ></path></svg
        >
        <div>
          <div class="font-semibold mb-2">Required CSV Headers (* required):</div>
          <div class="text-sm space-y-1">
            <div><strong>name*</strong> - Product name</div>
            <div><strong>category*</strong> - Product category</div>
            <div><strong>price*</strong> - Selling price (number)</div>
            <div><strong>mrp*</strong> - Maximum retail price (number)</div>
          </div>
          <div class="font-semibold mt-3 mb-2">Optional Headers:</div>
          <div class="text-sm space-y-1">
            <div><strong>description</strong> - Product description</div>
            <div><strong>subcategory</strong> - Product subcategory</div>
            <div><strong>stock</strong> - Stock quantity (number, default: 0)</div>
            <div><strong>weight</strong> - Weight in grams (number)</div>
            <div><strong>dimensions</strong> - Product dimensions</div>
            <div><strong>tags</strong> - Comma-separated tags</div>
            <div><strong>active</strong> - Is active (true/false, default: true)</div>
            <div><strong>featured</strong> - Is featured (true/false, default: false)</div>
            <div><strong>gstPercentage</strong> - GST percentage (number, default: 5)</div>
            <div><strong>taxInclusive</strong> - Price includes tax (true/false, default: false)</div>
          </div>
          <div class="text-xs mt-3 opacity-75">
            Note: mainImage and images arrays cannot be set via CSV. Use the image upload after import.
          </div>
        </div>
      </div>

      <form id="csvForm" enctype="multipart/form-data">
        <div class="form-control">
          <label class="label">
            <span class="label-text">Select CSV File</span>
          </label>
          <input
            type="file"
            id="csvFile"
            name="csv"
            accept=".csv"
            class="file-input file-input-bordered w-full"
            required
          />
        </div>

        <div class="modal-action">
          <button
            type="button"
            class="btn btn-ghost"
            onclick="document.getElementById('csvModal').close()">Cancel</button
          >
          <button type="submit" class="btn btn-primary" id="uploadCsvSubmitBtn"
            >Upload & Import</button
          >
        </div>
      </form>
    </div>
  </div>
</dialog>

<script is:inline>
  // Minimal CSV upload functionality
  async function uploadCsv() {
    try {
      const submitBtn = document.getElementById('uploadCsvSubmitBtn');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = 'Uploading...';

      const formData = new FormData(document.getElementById('csvForm'));

      const response = await fetch('/api/products/upload-csv', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (result.success) {
        document.getElementById('csvModal').close();
        document.getElementById('csvForm').reset();

        // Reload products via React component
        if (window.loadProducts) {
          window.loadProducts();
        }

        if (window.toast) {
          window.toast.success(
            `Success! Imported ${result.imported} products.`
          );
        }
      } else {
        if (window.toast) {
          window.toast.error(
            'Error: ' + (result.error || 'Failed to upload CSV')
          );
        }
      }
    } catch (error) {
      console.error('Error uploading CSV:', error);
      if (window.toast) {
        window.toast.error('Failed to upload CSV');
      }
    } finally {
      const submitBtn = document.getElementById('uploadCsvSubmitBtn');
      submitBtn.disabled = false;
      submitBtn.textContent = 'Upload & Import';
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    // CSV form submission
    const csvForm = document.getElementById('csvForm');
    if (csvForm) {
      csvForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await uploadCsv();
      });
    }
  });
</script>

<style>
  .table th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .input-group input:focus {
    outline: none;
    border-color: oklch(var(--p));
  }
</style>
