---
import Layout from "@/layouts/Layout.astro";
import ProfileLayout from "@/layouts/ProfileLayout.astro";
import Container from "@/components/ui/Container.astro";
import Heading from "@/components/ui/Heading.astro";
import Paragraph from "@/components/ui/Paragraph.astro";
import { getUser } from "@/lib/auth-utils";

const user = await getUser(Astro);

if (!user) {
  return Astro.redirect("/admin/login");
}

if (!user.emailVerified) {
  return Astro.redirect("/emailVerification");
}
---

<Layout title="Coupons">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-8xl mt-20 lg:mt-0 mx-auto">
        <div class="mb-8">
          <Heading size="xl" class="mb-2">Discount Coupons</Heading>
          <Paragraph class="opacity-70"
            >Create and manage discount coupons</Paragraph
          >
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Create/Edit Coupon Form -->
          <div class="lg:col-span-1">
            <div class="card bg-base-200 shadow-sm sticky top-4">
              <div class="card-body">
                <Heading size="md" class="mb-4" id="form-title"
                  >Create New Coupon</Heading
                >

                <form id="coupon-form" class="space-y-4">
                  <input type="hidden" id="coupon-id" />

                  <div class="form-control">
                    <label class="label" for="coupon-code">
                      <span class="label-text">Coupon Code</span>
                    </label>
                    <input
                      type="text"
                      id="coupon-code"
                      name="code"
                      required
                      class="input input-bordered w-full uppercase"
                      placeholder="e.g., SAVE20"
                      maxlength="20"
                    />
                  </div>

                  <div class="form-control">
                    <label class="label" for="coupon-description">
                      <span class="label-text">Description</span>
                    </label>
                    <textarea
                      id="coupon-description"
                      name="description"
                      required
                      class="textarea textarea-bordered w-full"
                      placeholder="e.g., Get 20% off on orders above ₹500"
                      rows="2"></textarea>
                  </div>

                  <div class="grid grid-cols-2 gap-4">
                    <div class="form-control">
                      <label class="label" for="discount-type">
                        <span class="label-text">Discount Type</span>
                      </label>
                      <select
                        id="discount-type"
                        name="discountType"
                        required
                        class="select select-bordered"
                      >
                        <option value="percentage">Percentage</option>
                        <option value="fixed">Fixed Amount</option>
                      </select>
                    </div>

                    <div class="form-control">
                      <label class="label" for="discount-value">
                        <span class="label-text">Discount Value</span>
                      </label>
                      <input
                        type="number"
                        id="discount-value"
                        name="discountValue"
                        required
                        class="input input-bordered w-full"
                        placeholder="20"
                        min="0"
                        step="0.01"
                      />
                    </div>
                  </div>

                  <div class="form-control">
                    <label class="label" for="minimum-amount">
                      <span class="label-text">Minimum Order Amount (₹)</span>
                    </label>
                    <input
                      type="number"
                      id="minimum-amount"
                      name="minimumOrderAmount"
                      class="input input-bordered w-full"
                      placeholder="500"
                      min="0"
                      step="0.01"
                    />
                  </div>

                  <div class="form-control" id="max-discount-container">
                    <label class="label" for="max-discount">
                      <span class="label-text">Max Discount Amount (₹)</span>
                    </label>
                    <input
                      type="number"
                      id="max-discount"
                      name="maxDiscountAmount"
                      class="input input-bordered w-full"
                      placeholder="1000"
                      min="0"
                      step="0.01"
                    />
                    <label class="label">
                      <span class="label-text-alt"
                        >Only for percentage discounts</span
                      >
                    </label>
                  </div>

                  <div class="grid grid-cols-2 gap-4">
                    <div class="form-control">
                      <label class="label" for="valid-from">
                        <span class="label-text">Valid From</span>
                      </label>
                      <input
                        type="datetime-local"
                        id="valid-from"
                        name="validFrom"
                        required
                        class="input input-bordered w-full"
                      />
                    </div>

                    <div class="form-control">
                      <label class="label" for="valid-to">
                        <span class="label-text">Valid To</span>
                      </label>
                      <input
                        type="datetime-local"
                        id="valid-to"
                        name="validTo"
                        required
                        class="input input-bordered w-full"
                      />
                    </div>
                  </div>

                  <div class="form-control">
                    <label class="label" for="usage-limit">
                      <span class="label-text">Usage Limit</span>
                    </label>
                    <input
                      type="number"
                      id="usage-limit"
                      name="usageLimit"
                      class="input input-bordered w-full"
                      placeholder="100"
                      min="1"
                    />
                    <label class="label">
                      <span class="label-text-alt"
                        >Leave empty for unlimited use</span
                      >
                    </label>
                  </div>

                  <div class="form-control">
                    <label class="cursor-pointer label justify-start gap-3">
                      <input
                        type="checkbox"
                        id="is-active"
                        name="isActive"
                        checked
                        class="checkbox"
                      />
                      <span class="label-text">Active</span>
                    </label>
                  </div>

                  <div class="flex gap-2">
                    <button
                      type="submit"
                      id="submit-btn"
                      class="btn btn-primary flex-1"
                    >
                      Create Coupon
                    </button>
                    <button
                      type="button"
                      id="cancel-btn"
                      class="btn btn-outline hidden"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>

          <!-- Coupons List -->
          <div class="lg:col-span-2">
            <div class="card bg-base-200 shadow-sm">
              <div class="card-body">
                <!-- Search Section -->
                <div class="flex flex-col md:flex-row gap-4 mb-6">
                  <div class="flex-1">
                    <div class="form-control">
                      <div class="input-group">
                        <label class="input">
                          <svg
                            class="h-[1em] opacity-50"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                          >
                            <g
                              stroke-linejoin="round"
                              stroke-linecap="round"
                              stroke-width="2.5"
                              fill="none"
                              stroke="currentColor"
                            >
                              <circle cx="11" cy="11" r="8"></circle>
                              <path d="m21 21-4.3-4.3"></path>
                            </g>
                          </svg>
                          <input
                            type="text"
                            id="coupon-search"
                            placeholder="Search coupons..."
                            class="input input-bordered w-full"
                          />
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="flex gap-2">
                  <select id="status-filter" class="select select-bordered">
                    <option value="">All Status</option>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                  </select>
                  <button id="clear-search" class="btn btn-outline btn-sm"
                    >Clear</button
                  >
                </div>
              </div>

              <!-- Loading State -->
              <div
                id="coupons-loading"
                class="flex items-center justify-center h-32"
              >
                <span class="loading loading-spinner loading-lg"></span>
              </div>

              <!-- Error State -->
              <div id="coupons-error" class="alert alert-error hidden">
                <span id="coupons-error-message">Failed to load coupons</span>
              </div>

              <!-- Empty State -->
              <div id="coupons-empty" class="text-center py-12 hidden">
                <svg
                  class="w-16 h-16 mx-auto mb-4 opacity-50"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"
                  ></path>
                </svg>
                <Heading size="md" class="mb-2">No coupons found</Heading>
                <Paragraph class="opacity-70"
                  >Create your first coupon to get started</Paragraph
                >
              </div>

              <!-- Coupons List -->
              <div id="coupons-container" class="hidden">
                <div class="flex justify-between items-center mb-4">
                  <Paragraph size="sm" id="coupons-count" class="opacity-70"
                    >Loading...</Paragraph
                  >
                  <div class="flex gap-2">
                    <button
                      id="prev-page"
                      class="btn btn-sm btn-outline"
                      disabled>Previous</button
                    >
                    <button
                      id="next-page"
                      class="btn btn-sm btn-outline"
                      disabled>Next</button
                    >
                  </div>
                </div>

                <div class="space-y-4" id="coupons-list"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<!-- Toast Container -->
<div class="toast toast-top toast-end z-50" id="toast-container"></div>

<script is:inline>
  let currentCouponPage = 0;
  let currentCouponSearch = "";
  let currentCouponStatus = "";
  let isCouponsLoading = false;
  let couponsPagination = { total: 0, limit: 20, offset: 0, hasMore: false };
  let editingCouponId = null;

  // Toast Manager
  class CouponToastManager {
    constructor() {
      this.container =
        document.getElementById("toast-container") || this.createContainer();
    }

    createContainer() {
      const container = document.createElement("div");
      container.id = "toast-container";
      container.className = "toast toast-top toast-end z-50";
      document.body.appendChild(container);
      return container;
    }

    show(message, type = "info", duration = 4000) {
      const toast = document.createElement("div");

      let alertClass = "";
      let icon = "";

      switch (type) {
        case "success":
          alertClass = "alert-success";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case "error":
          alertClass = "alert-error";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case "warning":
          alertClass = "alert-warning";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" /></svg>`;
          break;
        default:
          alertClass = "alert-info";
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
      }

      toast.className = `alert ${alertClass} shadow-lg mb-2`;
      toast.innerHTML = `
        <div class="flex items-center">
          ${icon}
          <span class="ml-2">${message}</span>
        </div>
        <div class="flex-none">
          <button class="btn btn-sm btn-ghost btn-circle" onclick="this.closest('.alert').remove()">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `;

      this.container.appendChild(toast);

      setTimeout(() => {
        if (toast.parentElement) {
          toast.remove();
        }
      }, duration);
    }
  }

  const toastManager = new CouponToastManager();

  function formatCurrencyCoupons(amount) {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
    }).format(amount);
  }

  function formatDateTimeCoupons(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  async function loadCoupons(search = "", status = "", offset = 0) {
    if (isCouponsLoading) return;
    isCouponsLoading = true;

    try {
      showCouponsLoading();

      const params = new URLSearchParams({
        limit: "20",
        offset: offset.toString(),
      });

      if (search.trim()) {
        params.set("search", search.trim());
      }

      if (status.trim()) {
        params.set("isActive", status.trim());
      }

      const response = await fetch(`/api/coupons?${params}`);
      if (!response.ok) throw new Error("Failed to fetch coupons");

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || "Failed to load coupons");
      }

      if (!data.coupons || data.coupons.length === 0) {
        showCouponsEmpty();
        return;
      }

      couponsPagination = data.pagination;
      currentCouponSearch = search;
      currentCouponStatus = status;
      currentCouponPage = Math.floor(offset / couponsPagination.limit);

      hideCouponsLoading();
      renderCoupons(data.coupons);
      updateCouponsPagination();
    } catch (error) {
      showCouponsError("Failed to load coupons");
    } finally {
      isCouponsLoading = false;
    }
  }

  function showCouponsLoading() {
    document.getElementById("coupons-loading").classList.remove("hidden");
    document.getElementById("coupons-container").classList.add("hidden");
    document.getElementById("coupons-error").classList.add("hidden");
    document.getElementById("coupons-empty").classList.add("hidden");
  }

  function hideCouponsLoading() {
    document.getElementById("coupons-loading").classList.add("hidden");
    document.getElementById("coupons-container").classList.remove("hidden");
  }

  function showCouponsError(message) {
    document.getElementById("coupons-loading").classList.add("hidden");
    document.getElementById("coupons-container").classList.add("hidden");
    document.getElementById("coupons-empty").classList.add("hidden");
    document.getElementById("coupons-error-message").textContent = message;
    document.getElementById("coupons-error").classList.remove("hidden");
  }

  function showCouponsEmpty() {
    document.getElementById("coupons-loading").classList.add("hidden");
    document.getElementById("coupons-container").classList.add("hidden");
    document.getElementById("coupons-error").classList.add("hidden");
    document.getElementById("coupons-empty").classList.remove("hidden");
  }

  function renderCoupons(coupons) {
    const container = document.getElementById("coupons-list");
    if (!container) return;

    container.innerHTML = coupons
      .map((coupon) => {
        const now = new Date();
        const validFrom = new Date(coupon.validFrom);
        const validTo = new Date(coupon.validTo);

        let statusBadge = "";
        if (!coupon.isActive) {
          statusBadge = '<span class="badge badge-error">Inactive</span>';
        } else if (now < validFrom) {
          statusBadge = '<span class="badge badge-warning">Not Started</span>';
        } else if (now > validTo) {
          statusBadge = '<span class="badge badge-error">Expired</span>';
        } else {
          statusBadge = '<span class="badge badge-success">Active</span>';
        }

        const discountText =
          coupon.discountType === "percentage"
            ? `${coupon.discountValue}% off`
            : `${formatCurrencyCoupons(coupon.discountValue)} off`;

        return `
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body p-6">
            <div class="flex justify-between items-start mb-4">
              <div>
                <h3 class="font-bold text-lg">${coupon.code}</h3>
                <p class="text-sm opacity-70">${coupon.description}</p>
              </div>
              <div class="flex gap-2">
                ${statusBadge}
                <div class="dropdown dropdown-end">
                  <button tabindex="0" role="button" class="btn btn-ghost btn-sm btn-circle">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01"></path>
                    </svg>
                  </button>
                  <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a onclick="editCoupon(${coupon.id})">Edit</a></li>
                    <li><a onclick="toggleCouponStatus(${coupon.id}, ${!coupon.isActive})">${coupon.isActive ? "Deactivate" : "Activate"}</a></li>
                    <li><a onclick="deleteCoupon(${coupon.id})" class="text-error">Delete</a></li>
                  </ul>
                </div>
              </div>
            </div>

            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span class="font-medium">Discount:</span>
                <div class="font-bold text-primary">${discountText}</div>
              </div>
              <div>
                <span class="font-medium">Min Order:</span>
                <div>${formatCurrencyCoupons(coupon.minimumOrderAmount)}</div>
              </div>
              <div>
                <span class="font-medium">Used:</span>
                <div>${coupon.usedCount}${coupon.usageLimit ? `/${coupon.usageLimit}` : ""}</div>
              </div>
              <div>
                <span class="font-medium">Valid Until:</span>
                <div>${formatDateTimeCoupons(coupon.validTo)}</div>
              </div>
            </div>

            ${
              coupon.maxDiscountAmount
                ? `
              <div class="mt-2 text-sm opacity-70">
                Max discount: ${formatCurrencyCoupons(coupon.maxDiscountAmount)}
              </div>
            `
                : ""
            }
          </div>
        </div>
      `;
      })
      .join("");

    // Update results count
    const count = document.getElementById("coupons-count");
    if (count) {
      const start = couponsPagination.offset + 1;
      const end = Math.min(
        couponsPagination.offset + couponsPagination.limit,
        couponsPagination.total
      );
      count.textContent = `Showing ${start}-${end} of ${couponsPagination.total} coupons`;
    }
  }

  function updateCouponsPagination() {
    const prevBtn = document.getElementById("prev-page");
    const nextBtn = document.getElementById("next-page");

    if (prevBtn) {
      prevBtn.disabled = couponsPagination.offset === 0;
    }

    if (nextBtn) {
      nextBtn.disabled = !couponsPagination.hasMore;
    }
  }

  // Form handling
  async function handleCouponSubmit(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    // Convert checkbox
    data.isActive = document.getElementById("is-active").checked;

    const submitBtn = document.getElementById("submit-btn");
    const originalText = submitBtn.textContent;

    try {
      submitBtn.disabled = true;
      submitBtn.textContent = editingCouponId ? "Updating..." : "Creating...";
      submitBtn.classList.add("loading");

      const url = editingCouponId
        ? `/api/coupons/${editingCouponId}`
        : "/api/coupons";
      const method = editingCouponId ? "PUT" : "POST";

      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || "Failed to save coupon");
      }

      toastManager.show(
        editingCouponId
          ? "Coupon updated successfully!"
          : "Coupon created successfully!",
        "success"
      );

      resetForm();
      loadCoupons(
        currentCouponSearch,
        currentCouponStatus,
        couponsPagination.offset
      );
    } catch (error) {
      toastManager.show(error.message, "error");
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
      submitBtn.classList.remove("loading");
    }
  }

  function resetForm() {
    document.getElementById("coupon-form").reset();
    document.getElementById("coupon-id").value = "";
    document.getElementById("form-title").textContent = "Create New Coupon";
    document.getElementById("submit-btn").textContent = "Create Coupon";
    document.getElementById("cancel-btn").classList.add("hidden");
    document.getElementById("is-active").checked = true;
    editingCouponId = null;

    // Set default dates
    const now = new Date();
    const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);

    document.getElementById("valid-from").value = tomorrow
      .toISOString()
      .slice(0, 16);
    document.getElementById("valid-to").value = nextWeek
      .toISOString()
      .slice(0, 16);
  }

  window.editCoupon = async function (couponId) {
    try {
      // In a real app, you'd fetch the coupon details
      // For now, we'll need to implement a get coupon API
      toastManager.show("Edit functionality coming soon", "info");
    } catch (error) {
      toastManager.show("Failed to load coupon details", "error");
    }
  };

  window.toggleCouponStatus = async function (couponId, newStatus) {
    try {
      const response = await fetch(`/api/coupons/${couponId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ isActive: newStatus }),
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || "Failed to update coupon status");
      }

      toastManager.show(
        `Coupon ${newStatus ? "activated" : "deactivated"} successfully!`,
        "success"
      );
      loadCoupons(
        currentCouponSearch,
        currentCouponStatus,
        couponsPagination.offset
      );
    } catch (error) {
      toastManager.show(error.message, "error");
    }
  };

  window.deleteCoupon = async function (couponId) {
    if (
      !confirm(
        "Are you sure you want to delete this coupon? This action cannot be undone."
      )
    ) {
      return;
    }

    try {
      const response = await fetch(`/api/coupons/${couponId}`, {
        method: "DELETE",
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || "Failed to delete coupon");
      }

      toastManager.show("Coupon deleted successfully!", "success");
      loadCoupons(
        currentCouponSearch,
        currentCouponStatus,
        couponsPagination.offset
      );
    } catch (error) {
      toastManager.show(error.message, "error");
    }
  };

  // Debounced search
  const debouncedCouponSearch = debounce((search) => {
    loadCoupons(search, currentCouponStatus, 0);
  }, 300);

  function setupCouponsEventListeners() {
    // Form submission
    document
      .getElementById("coupon-form")
      .addEventListener("submit", handleCouponSubmit);

    // Cancel button
    document.getElementById("cancel-btn").addEventListener("click", resetForm);

    // Search functionality
    const searchInput = document.getElementById("coupon-search");
    const searchBtn = document.getElementById("search-btn");
    const statusFilter = document.getElementById("status-filter");
    const clearBtn = document.getElementById("clear-search");

    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        debouncedCouponSearch(e.target.value);
      });

      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          loadCoupons(e.target.value, currentCouponStatus, 0);
        }
      });
    }

    if (searchBtn) {
      searchBtn.addEventListener("click", () => {
        const search = searchInput?.value || "";
        loadCoupons(search, currentCouponStatus, 0);
      });
    }

    if (statusFilter) {
      statusFilter.addEventListener("change", (e) => {
        loadCoupons(currentCouponSearch, e.target.value, 0);
      });
    }

    if (clearBtn) {
      clearBtn.addEventListener("click", () => {
        if (searchInput) searchInput.value = "";
        if (statusFilter) statusFilter.value = "";
        loadCoupons("", "", 0);
      });
    }

    // Pagination
    const prevBtn = document.getElementById("prev-page");
    const nextBtn = document.getElementById("next-page");

    if (prevBtn) {
      prevBtn.addEventListener("click", () => {
        if (couponsPagination.offset > 0) {
          loadCoupons(
            currentCouponSearch,
            currentCouponStatus,
            couponsPagination.offset - couponsPagination.limit
          );
        }
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener("click", () => {
        if (couponsPagination.hasMore) {
          loadCoupons(
            currentCouponSearch,
            currentCouponStatus,
            couponsPagination.offset + couponsPagination.limit
          );
        }
      });
    }

    // Discount type change
    const discountType = document.getElementById("discount-type");
    const maxDiscountContainer = document.getElementById(
      "max-discount-container"
    );

    if (discountType) {
      discountType.addEventListener("change", (e) => {
        if (e.target.value === "percentage") {
          maxDiscountContainer.style.display = "block";
        } else {
          maxDiscountContainer.style.display = "none";
        }
      });
    }

    // Auto-uppercase coupon code
    const codeInput = document.getElementById("coupon-code");
    if (codeInput) {
      codeInput.addEventListener("input", (e) => {
        e.target.value = e.target.value.toUpperCase();
      });
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    setupCouponsEventListeners();
    resetForm(); // Set default dates
    loadCoupons();
  });
</script>

<style>
  .input-group input:focus {
    outline: none;
    border-color: oklch(var(--p));
  }
</style>
