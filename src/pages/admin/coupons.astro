---
import Container from '@/components/ui/Container.astro';
import Layout from '@/layouts/Layout.astro';
import ProfileLayout from '@/layouts/ProfileLayout.astro';
import { CouponsDataTable } from '@/components/Admin/CouponsDataTable';
import { requireAdminAuth } from '@/lib/auth-utils';
import AdminBreadcrumbs from '@/components/Admin/AdminBreadcrumbs.astro';
import Heading from '@/components/ui/Heading.astro';

const authResult = await requireAdminAuth(Astro);
if (authResult instanceof Response) {
  return authResult;
}
---

<Layout title="Manobal | Coupons">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-8xl mt-20 lg:mt-0 mx-auto">
        <AdminBreadcrumbs
          items={[{ label: 'Coupons' }]}
          pageTitle="Discount Coupons"
          pageDescription="Create and manage discount coupons"
        />

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Create/Edit Coupon Form -->
          <div class="lg:col-span-3">
            <div class="card bg-base-200 shadow-sm sticky top-4">
              <div class="card-body">
                <Heading size="md" class="mb-4" id="form-title"
                  >Create New Coupon</Heading
                >

                <form id="coupon-form" class="space-y-4">
                  <input type="hidden" id="coupon-id" />

                  <div class="form-control">
                    <label class="label" for="coupon-code">
                      <span class="label-text">Coupon Code</span>
                    </label>
                    <input
                      type="text"
                      id="coupon-code"
                      name="code"
                      required
                      class="input input-bordered w-full uppercase"
                      placeholder="e.g., SAVE20"
                      maxlength="20"
                    />
                  </div>

                  <div class="form-control">
                    <label class="label" for="coupon-description">
                      <span class="label-text">Description</span>
                    </label>
                    <textarea
                      id="coupon-description"
                      name="description"
                      required
                      class="textarea textarea-bordered w-full"
                      placeholder="e.g., Get 20% off on orders above ₹500"
                      rows="2"></textarea>
                  </div>

                  <div class="grid grid-cols-2 gap-4">
                    <div class="form-control">
                      <label class="label" for="discount-type">
                        <span class="label-text">Discount Type</span>
                      </label>
                      <select
                        id="discount-type"
                        name="discountType"
                        required
                        class="select select-bordered"
                      >
                        <option value="percentage">Percentage</option>
                        <option value="fixed">Fixed Amount</option>
                      </select>
                    </div>

                    <div class="form-control">
                      <label class="label" for="discount-value">
                        <span class="label-text">Discount Value</span>
                      </label>
                      <input
                        type="number"
                        id="discount-value"
                        name="discountValue"
                        required
                        class="input input-bordered w-full"
                        placeholder="20"
                        min="0"
                        step="0.01"
                      />
                    </div>
                  </div>

                  <div class="form-control">
                    <label class="label" for="minimum-amount">
                      <span class="label-text">Minimum Order Amount (₹)</span>
                    </label>
                    <input
                      type="number"
                      id="minimum-amount"
                      name="minimumOrderAmount"
                      class="input input-bordered w-full"
                      placeholder="500"
                      min="0"
                      step="0.01"
                    />
                  </div>

                  <div class="form-control" id="max-discount-container">
                    <label class="label" for="max-discount">
                      <span class="label-text">Max Discount Amount (₹)</span>
                    </label>
                    <input
                      type="number"
                      id="max-discount"
                      name="maxDiscountAmount"
                      class="input input-bordered w-full"
                      placeholder="1000"
                      min="0"
                      step="0.01"
                    />
                    <label class="label">
                      <span class="label-text-alt"
                        >Only for percentage discounts</span
                      >
                    </label>
                  </div>

                  <div class="grid grid-cols-2 gap-4">
                    <div class="form-control">
                      <label class="label" for="valid-from">
                        <span class="label-text">Valid From</span>
                      </label>
                      <input
                        type="datetime-local"
                        id="valid-from"
                        name="validFrom"
                        required
                        class="input input-bordered w-full"
                      />
                    </div>

                    <div class="form-control">
                      <label class="label" for="valid-to">
                        <span class="label-text">Valid To</span>
                      </label>
                      <input
                        type="datetime-local"
                        id="valid-to"
                        name="validTo"
                        required
                        class="input input-bordered w-full"
                      />
                    </div>
                  </div>

                  <div class="form-control">
                    <label class="label" for="usage-limit">
                      <span class="label-text">Usage Limit</span>
                    </label>
                    <input
                      type="number"
                      id="usage-limit"
                      name="usageLimit"
                      class="input input-bordered w-full"
                      placeholder="100"
                      min="1"
                    />
                    <label class="label">
                      <span class="label-text-alt"
                        >Leave empty for unlimited use</span
                      >
                    </label>
                  </div>

                  <div class="form-control">
                    <label class="cursor-pointer label justify-start gap-3">
                      <input
                        type="checkbox"
                        id="is-active"
                        name="isActive"
                        checked
                        class="checkbox"
                      />
                      <span class="label-text">Active</span>
                    </label>
                  </div>

                  <div class="flex gap-2">
                    <button
                      type="submit"
                      id="submit-btn"
                      class="btn btn-primary flex-1"
                    >
                      Create Coupon
                    </button>
                    <button
                      type="button"
                      id="cancel-btn"
                      class="btn btn-outline hidden"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>

          <!-- Coupons List -->
          <div class="lg:col-span-3">
            <div class="card bg-base-200 shadow-sm">
              <div class="card-body">
                <CouponsDataTable client:load />
              </div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<!-- Toast Container -->
<div class="toast toast-top toast-end z-50" id="toast-container"></div>

<script is:inline>
  let editingCouponId = null;

  // Toast Manager
  class CouponToastManager {
    constructor() {
      this.container =
        document.getElementById('toast-container') || this.createContainer();
    }

    createContainer() {
      const container = document.createElement('div');
      container.id = 'toast-container';
      container.className = 'toast toast-top toast-end z-50';
      document.body.appendChild(container);
      return container;
    }

    show(message, type = 'info', duration = 4000) {
      const toast = document.createElement('div');

      let alertClass = '';
      let icon = '';

      switch (type) {
        case 'success':
          alertClass = 'alert-success';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case 'error':
          alertClass = 'alert-error';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
          break;
        case 'warning':
          alertClass = 'alert-warning';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" /></svg>`;
          break;
        default:
          alertClass = 'alert-info';
          icon = `<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
      }

      toast.className = `alert ${alertClass} shadow-lg mb-2`;
      toast.innerHTML = `
        <div class="flex items-center">
          ${icon}
          <span class="ml-2">${message}</span>
        </div>
        <div class="flex-none">
          <button class="btn btn-sm btn-ghost btn-circle" onclick="this.closest('.alert').remove()">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `;

      this.container.appendChild(toast);

      setTimeout(() => {
        if (toast.parentElement) {
          toast.remove();
        }
      }, duration);
    }
  }

  const toastManager = new CouponToastManager();

  // Form handling
  async function handleCouponSubmit(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    // Convert checkbox
    data.isActive = document.getElementById('is-active').checked;

    const submitBtn = document.getElementById('submit-btn');
    const originalText = submitBtn.textContent;

    try {
      submitBtn.disabled = true;
      submitBtn.textContent = editingCouponId ? 'Updating...' : 'Creating...';
      submitBtn.classList.add('loading');

      const url = editingCouponId
        ? `/api/coupons/${editingCouponId}`
        : '/api/coupons';
      const method = editingCouponId ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Failed to save coupon');
      }

      toastManager.show(
        editingCouponId
          ? 'Coupon updated successfully!'
          : 'Coupon created successfully!',
        'success'
      );

      resetForm();
      // Refresh the DataTable
      if (window.loadCoupons) {
        window.loadCoupons();
      }
    } catch (error) {
      toastManager.show(error.message, 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
      submitBtn.classList.remove('loading');
    }
  }

  function resetForm() {
    document.getElementById('coupon-form').reset();
    document.getElementById('coupon-id').value = '';
    document.getElementById('form-title').textContent = 'Create New Coupon';
    document.getElementById('submit-btn').textContent = 'Create Coupon';
    document.getElementById('cancel-btn').classList.add('hidden');
    document.getElementById('is-active').checked = true;
    editingCouponId = null;

    // Set default dates
    const now = new Date();
    const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);

    document.getElementById('valid-from').value = tomorrow
      .toISOString()
      .slice(0, 16);
    document.getElementById('valid-to').value = nextWeek
      .toISOString()
      .slice(0, 16);
  }

  function setupCouponsEventListeners() {
    // Form submission
    document
      .getElementById('coupon-form')
      .addEventListener('submit', handleCouponSubmit);

    // Cancel button
    document.getElementById('cancel-btn').addEventListener('click', resetForm);

    // Discount type change
    const discountType = document.getElementById('discount-type');
    const maxDiscountContainer = document.getElementById(
      'max-discount-container'
    );

    if (discountType) {
      discountType.addEventListener('change', (e) => {
        if (e.target.value === 'percentage') {
          maxDiscountContainer.style.display = 'block';
        } else {
          maxDiscountContainer.style.display = 'none';
        }
      });
    }

    // Auto-uppercase coupon code
    const codeInput = document.getElementById('coupon-code');
    if (codeInput) {
      codeInput.addEventListener('input', (e) => {
        e.target.value = e.target.value.toUpperCase();
      });
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    setupCouponsEventListeners();
    resetForm(); // Set default dates
  });
</script>

<style>
  .input-group input:focus {
    outline: none;
    border-color: oklch(var(--p));
  }
</style>
