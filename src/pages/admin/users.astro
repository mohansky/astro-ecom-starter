---
import Layout from "@/layouts/Layout.astro";
import ProfileLayout from "@/layouts/ProfileLayout.astro";
import Container from "@/components/ui/Container.astro";
import Heading from "@/components/ui/Heading.astro";
import { requireAdminAuth } from "@/lib/auth-utils";
import { db } from "@/lib/db";
import { user } from "@/lib/schema";

// Check if user is admin
const authResult = await requireAdminAuth(Astro);
if (authResult instanceof Response) {
  return authResult;
}

// Fetch all users
let users: any[] = [];
try {
  users = await db.select().from(user).orderBy(user.createdAt);
} catch (error) {
  console.error('Error fetching users:', error);
}
---

<Layout title="User Management">
  <ProfileLayout>
    <Container width="marginy">
      <div class="max-w-6xl mx-auto">
        <Heading size="xl" class="mb-8">User Management</Heading>

        <div class="card bg-base-100 shadow-xl">
          <div class="card-body">
            <div class="overflow-x-auto">
              <table class="table table-zebra">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Verified</th>
                    <th>Created</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((userItem) => (
                    <tr>
                      <td>
                        <div class="flex items-center gap-3">
                          <div class="avatar">
                            <div class="w-12 h-12 rounded-full">
                              {userItem.image ? (
                                <img
                                  src={userItem.image}
                                  alt={userItem.name}
                                  class="w-full h-full rounded-full object-cover"
                                />
                              ) : (
                                <div class="bg-neutral text-neutral-content rounded-full w-full h-full flex items-center justify-center">
                                  <span class="text-sm font-semibold">
                                    {userItem.name?.charAt(0).toUpperCase() || 'U'}
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>
                          <div>
                            <div class="font-bold">{userItem.name}</div>
                          </div>
                        </div>
                      </td>
                      <td>{userItem.email}</td>
                      <td>
                        <div class="flex items-center gap-2">
                          <select
                            class="select select-xs select-bordered role-select"
                            data-user-id={userItem.id}
                            data-current-role={userItem.role}
                          >
                            <option value="customer" selected={userItem.role === 'customer'}>Customer</option>
                            <option value="user" selected={userItem.role === 'user'}>User</option>
                            <option value="admin" selected={userItem.role === 'admin'}>Admin</option>
                          </select>
                        </div>
                      </td>
                      <td>
                        <div class="flex items-center gap-2">
                          {userItem.emailVerified ? (
                            <div class="badge badge-success badge-sm">Verified</div>
                          ) : (
                            <div class="badge badge-warning badge-sm">Unverified</div>
                          )}
                          {!userItem.emailVerified && (
                            <button
                              class="btn btn-xs btn-primary verify-btn"
                              data-user-id={userItem.id}
                            >
                              Verify
                            </button>
                          )}
                        </div>
                      </td>
                      <td>{new Date(userItem.createdAt).toLocaleDateString()}</td>
                      <td>
                        <div class="flex gap-2">
                          <button
                            class="btn btn-xs btn-error delete-btn"
                            data-user-id={userItem.id}
                            data-user-name={userItem.name}
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </ProfileLayout>
</Layout>

<!-- Delete Confirmation Modal -->
<dialog id="delete_modal" class="modal">
  <div class="modal-box">
    <h3 class="font-bold text-lg text-error">⚠️ Delete User</h3>
    <p class="py-4">
      Are you sure you want to delete user <span id="delete-user-name" class="font-semibold"></span>?
    </p>
    <p class="text-sm text-base-content/70 mb-4">
      This action cannot be undone and will permanently remove the user and all associated data.
    </p>
    <div class="modal-action">
      <form method="dialog">
        <button class="btn btn-ghost" id="cancel-delete">Cancel</button>
      </form>
      <button class="btn btn-error" id="confirm-delete">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete User
      </button>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>


<script>
  // Handle role changes
  document.querySelectorAll('.role-select').forEach(select => {
    select.addEventListener('change', async (e) => {
      const target = e.target as HTMLSelectElement;
      const userId = target.dataset.userId;
      const newRole = target.value;
      const currentRole = target.dataset.currentRole;

      try {
        const response = await fetch('/api/admin/update-user-role', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId, role: newRole }),
        });

        if (response.ok) {
          target.dataset.currentRole = newRole;
          // Show success notification
          const toast = document.createElement('div');
          toast.className = 'toast toast-top toast-end';
          toast.innerHTML = `
            <div class="alert alert-success">
              <span>Role updated successfully!</span>
            </div>
          `;
          document.body.appendChild(toast);
          setTimeout(() => toast.remove(), 3000);
        } else {
          // Revert select to previous value
          target.value = currentRole!;
          throw new Error('Failed to update role');
        }
      } catch (error) {
        console.error('Error updating role:', error);
        // Revert select to previous value
        target.value = currentRole!;
        alert('Failed to update role. Please try again.');
      }
    });
  });

  // Handle email verification
  document.querySelectorAll('.verify-btn').forEach(button => {
    button.addEventListener('click', async (e) => {
      const target = e.target as HTMLButtonElement;
      const userId = target.dataset.userId;

      try {
        const response = await fetch('/api/admin/verify-user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId }),
        });

        if (response.ok) {
          location.reload(); // Refresh the page to show updated status
        } else {
          throw new Error('Failed to verify user');
        }
      } catch (error) {
        console.error('Error verifying user:', error);
        alert('Failed to verify user. Please try again.');
      }
    });
  });

  // Handle user deletion
  let userToDelete = { id: '', name: '' };

  document.querySelectorAll('.delete-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      const userId = target.dataset.userId;
      const userName = target.dataset.userName;

      if (userId && userName) {
        userToDelete = { id: userId, name: userName };

        // Update modal content
        const userNameSpan = document.getElementById('delete-user-name');
        if (userNameSpan) {
          userNameSpan.textContent = userName;
        }

        // Show modal
        const modal = document.getElementById('delete_modal') as HTMLDialogElement;
        modal?.showModal();
      }
    });
  });

  // Handle confirm delete
  document.getElementById('confirm-delete')?.addEventListener('click', async () => {
    const confirmBtn = document.getElementById('confirm-delete') as HTMLButtonElement;

    try {
      // Show loading state
      confirmBtn.classList.add('loading');
      confirmBtn.disabled = true;

      const response = await fetch('/api/admin/delete-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: userToDelete.id }),
      });

      if (response.ok) {
        // Close modal
        const modal = document.getElementById('delete_modal') as HTMLDialogElement;
        modal?.close();

        // Show success toast
        const toast = document.createElement('div');
        toast.className = 'toast toast-top toast-end';
        toast.innerHTML = `
          <div class="alert alert-success">
            <span>User "${userToDelete.name}" deleted successfully!</span>
          </div>
        `;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);

        // Refresh page after short delay
        setTimeout(() => location.reload(), 1000);
      } else {
        throw new Error('Failed to delete user');
      }
    } catch (error) {
      console.error('Error deleting user:', error);

      // Show error toast
      const toast = document.createElement('div');
      toast.className = 'toast toast-top toast-end';
      toast.innerHTML = `
        <div class="alert alert-error">
          <span>Failed to delete user. Please try again.</span>
        </div>
      `;
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 3000);
    } finally {
      // Reset button state
      confirmBtn.classList.remove('loading');
      confirmBtn.disabled = false;
    }
  });
</script>