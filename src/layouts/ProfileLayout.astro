---
import { getUser } from "@/lib/auth-utils";
import { NavigationMenu } from "@/components/Admin/NavigationMenu";
import { LogoutIcon } from "@/components/Icons/LogoutIcon"; 
import Button from "@/components/react-ui/Button";
import DrawerTrigger from "@/components/Icons/DrawerTrigger.astro";

const user = await getUser(Astro);
---

<div class="drawer lg:drawer-open font-quicksand">
  <input id="my-drawer" type="checkbox" class="drawer-toggle" />

  <div class="drawer-content">
    <slot />
    <label 
      for="my-drawer" 
      class="btn btn-ghost drawer-button fixed top-18 left-0 lg:hidden z-50"
    >
    <DrawerTrigger/>
   
    </label>
  </div>
  
  <!-- Sidebar -->
  <div class="drawer-side">
    <label for="my-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
    {user ? (
      <aside class="menu bg-base-200 text-base-content min-h-full w-64 py-20 px-3">
        {/* <!-- User Profile Section --> */}
        <div class="mb-3 p-3 bg-base-100 rounded-lg shadow-sm">
          <div class="flex items-center space-x-3">
            <div class="avatar avatar-online">
              <div class="w-12 h-12 rounded-full bg-primary text-primary-content flex items-center justify-center">
                {user.image ? (
                  <img 
                    src={user.image} 
                    alt={user.name} 
                    class="w-full h-full rounded-full object-cover"
                  />
                ) : (
                  <span class="text-lg font-semibold capitalize">
                    {user.name?.charAt(0) || 'U'}
                  </span>
                )}
              </div>
            </div>
            
            <div class="flex-1 min-w-0">
              <h3 class="font-semibold text-base truncate">
                {user.name || 'User'}
              </h3>
              <p class="text-sm opacity-70 truncate">
                {user.email}
              </p>
            </div>
          </div>
        </div>

        {/* <!-- Navigation Menu --> */}
        <NavigationMenu client:load userRole={user.role} />
 
        {/* <!-- Logout Button --> */}
        <div class="mt-auto pt-4">
          <Button
            id="logoutBtn"
            variant="error"
            className="w-full"
            >
            <LogoutIcon size={14} />
            Logout
          </Button>
        </div>
      </aside>
    ) : (
      // <!-- Guest Menu -->
      <aside class="menu bg-base-200 text-base-content min-h-full w-60 p-4">
        <div class="flex flex-col items-center justify-center h-full space-y-4">
          <div class="text-center mb-6">
            <h3 class="text-lg font-semibold mb-2">Welcome!</h3>
            <p class="text-sm opacity-70">Please sign in to access admin features</p>
          </div>
          
          <div class="space-y-3 w-full">
            <a href="/admin/login" class="btn btn-primary w-full">
              Sign In
            </a>
            <a href="/admin/register" class="btn btn-outline w-full">
              Create Account
            </a>
          </div>
        </div>
      </aside>
    )}
  </div>
</div>

{user && (
  <script is:inline>
    document.getElementById('logoutBtn')?.addEventListener('click', async () => {
      const button = document.getElementById('logoutBtn');

      try { 
        if (button) {
          button.classList.add('loading');
          button.disabled = true;
        }
        
        const response = await fetch('/api/auth/sign-out', {
          method: 'POST',
          credentials: 'include',
        });
        
        if (response.ok) {
          window.location.href = '/';
        } else {
          throw new Error('Logout failed');
        }
      } catch (error) {
        console.error('Logout failed:', error);
        
        // Reset button state on error
        if (button) {
          button.classList.remove('loading');
          button.disabled = false;
        }
        
        // Show error message
        alert('Logout failed. Please try again.');
      }
    });
  </script>
)}

<script is:inline>
  // Handle drawer toggle icon changes
  const drawerCheckbox = document.getElementById('my-drawer');
  const openIcon = document.getElementById('open-icon');
  const closeIcon = document.getElementById('close-icon');
  
  function updateDrawerIcon() {
    if (drawerCheckbox?.checked) {
      // Drawer is open - show close icon
      openIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
    } else {
      // Drawer is closed - show open icon
      openIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
    }
  }
  
  // Listen for checkbox changes
  drawerCheckbox?.addEventListener('change', updateDrawerIcon);
  
  // Set initial state
  updateDrawerIcon();

  // Handle active navigation highlighting
  function updateActiveNav() {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link');

    // Remove active classes from all links
    navLinks.forEach(link => {
      link.classList.remove('bg-primary', 'text-primary-content', 'font-semibold');
      link.classList.add('hover:bg-base-100');
    });

    // Find and highlight the current route
    navLinks.forEach(link => {
      const linkRoute = link.getAttribute('data-route');

      // Check if linkRoute exists and then match routes
      if (linkRoute) {
        // Exact match for /admin or check if current path starts with the route
        if ((linkRoute === '/admin' && currentPath === '/admin') ||
            (linkRoute !== '/admin' && currentPath.startsWith(linkRoute))) {
          link.classList.add('bg-primary', 'text-primary-content', 'font-semibold');
          link.classList.remove('hover:bg-base-100');
        }
      }
    });
  }

  // Update active nav on page load
  updateActiveNav();

  // Update active nav on route changes (for SPAs)
  window.addEventListener('popstate', updateActiveNav);
</script>

